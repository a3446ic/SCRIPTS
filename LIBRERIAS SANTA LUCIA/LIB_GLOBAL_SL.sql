CREATE LIBRARY "EXT"."LIB_GLOBAL_SL" LANGUAGE SQLSCRIPT AS
BEGIN
  PUBLIC VARIABLE cn_DEBUG_OUT                         CONSTANT VARCHAR(50) := 'DEBUG_OUT';
  PUBLIC FUNCTION getTenantID() RETURNS o_TI VARCHAR(4)
  AS
	BEGIN
		SELECT DISTINCT TENANTID
		INTO o_TI
		FROM TCMP.CS_CALENDAR;
	END;
  PUBLIC PROCEDURE WRITE_LOG (IN i_object VARCHAR2(400), IN i_txt VARCHAR2(4000), INOUT io_valor INT, IN i_idproceso BIGINT,IN i_loglevel VARCHAR(20) ) LANGUAGE SQLSCRIPT 
  AS
	BEGIN
		
		DECLARE permiso_log INT:=0;
	
		SELECT cgc.GENERICBOOLEAN1 into permiso_log
		FROM cs_classifier clas
		INNER JOIN cs_genericclassifier cgc ON clas.classifierseq = cgc.classifierseq
			AND cgc.REMOVEDATE = to_Date('22000101','yyyymmdd') 
			AND cgc.EFFECTIVEENDDATE > CURRENT_DATE
			AND cgc.EFFECTIVESTARTDATE <= CURRENT_DATE
		WHERE clas.REMOVEDATE = to_Date('22000101','yyyymmdd')
			AND clas.EFFECTIVEENDDATE > CURRENT_DATE
			AND clas.EFFECTIVESTARTDATE <= CURRENT_DATE
			
			AND clas.name = i_loglevel;
				
		IF(permiso_log = 1)THEN
			INSERT INTO "EXT"."SL_LOG" (DATETIME, OBJECT, TEXT, VALUE, ID_PROCESO,LEVEL)
			VALUES (CURRENT_TIMESTAMP, i_object, i_txt, io_valor, i_idproceso,i_loglevel);
		
			io_valor:= io_valor + 1;
		
			COMMIT;
		END IF;
	END;
  PUBLIC PROCEDURE getPeriodName (IN i_Tenant VARCHAR2(4), IN pPlRunSeq BIGINT,  OUT o_PeriodName  VARCHAR(255) ) LANGUAGE SQLSCRIPT
  AS
	BEGIN
	DECLARE v_eot DATE := EXT.LIB_CONSTANTES_SL:v_eot;
	
		SELECT PER.NAME INTO o_PeriodName
		FROM TCMP.CS_CALENDAR CAL
		JOIN TCMP.CS_PERIOD PER
			ON CAL.CALENDARSEQ = PER.CALENDARSEQ
		JOIN TCMP.CS_PLRUN PLRUN
			ON PLRUN.CALENDARSEQ = CAL.CALENDARSEQ
			AND PLRUN.PERIODSEQ = PER.PERIODSEQ
		WHERE PER.REMOVEDATE = v_eot
			AND CAL.REMOVEDATE = v_eot
			AND PLRUN.PIPELINERUNSEQ = PPLRUNSEQ;
	END;
  PUBLIC PROCEDURE getPeriodSeq (IN i_Tenant VARCHAR2(4), IN i_PeriodName VARCHAR(255) ,  OUT o_PeriodSeq  BIGINT ) LANGUAGE SQLSCRIPT
  AS
	BEGIN
	
	DECLARE v_eot DATE := EXT.LIB_CONSTANTES_SL:v_eot;
	
		SELECT PERIODSEQ INTO o_PeriodSeq
		FROM TCMP.CS_PERIOD  
		WHERE REMOVEDATE = v_eot
			AND NAME = i_PeriodName
			AND TENANTID =i_Tenant;
	END;
  PUBLIC PROCEDURE getCalendarName (IN i_Tenant VARCHAR2(4), IN pPlRunSeq BIGINT,  OUT o_CalendarName  VARCHAR(255) ) LANGUAGE SQLSCRIPT
  AS
	BEGIN
	
	DECLARE v_eot DATE := EXT.LIB_CONSTANTES_SL:v_eot;
	
		SELECT CAL.NAME INTO o_CalendarName
		FROM TCMP.CS_PLRUN PLRUN
		INNER JOIN TCMP.CS_CALENDAR CAL
			ON PLRUN.CALENDARSEQ = CAL.CALENDARSEQ
				AND CAL.REMOVEDATE = v_eot
				AND CAL.TENANTID = i_Tenant
		WHERE PLRUN.PIPELINERUNSEQ = pPlRunSeq
			AND PLRUN.TENANTID = i_Tenant;
			
	END;
  PUBLIC PROCEDURE getCalendarSeq (IN i_Tenant VARCHAR2(4), IN i_CalendarName VARCHAR(255),  OUT o_CalendarSeq  BIGINT ) LANGUAGE SQLSCRIPT
  AS
	BEGIN
	
	DECLARE v_eot DATE := EXT.LIB_CONSTANTES_SL:v_eot;
	
		SELECT CAL.CALENDARSEQ INTO o_CalendarSeq 
		FROM TCMP.CS_CALENDAR CAL
		WHERE CAL.TENANTID = i_Tenant
			AND CAL.REMOVEDATE = v_eot
			AND CAL.NAME = i_CalendarName;
	END;
  PUBLIC PROCEDURE getProcessingUnitName (IN i_Tenant VARCHAR2(4), IN pPlRunSeq BIGINT,  OUT o_ProcessingUnitName  VARCHAR(255) ) LANGUAGE SQLSCRIPT
  AS
	BEGIN
	
		SELECT PU.NAME INTO o_ProcessingUnitName
		FROM TCMP.CS_PLRUN PLRUN
		INNER JOIN TCMP.CS_PROCESSINGUNIT PU
			ON PLRUN.PROCESSINGUNITSEQ = PU.PROCESSINGUNITSEQ
				AND PU.TENANTID = i_Tenant
		WHERE PLRUN.PIPELINERUNSEQ = pPlRunSeq
			AND PLRUN.TENANTID = i_Tenant;
	END;
  PUBLIC PROCEDURE getProcessingUnitSeq (IN i_Tenant VARCHAR2(4), IN i_ProcessingUnitName VARCHAR(255),  OUT o_ProcessingUnitSeq  BIGINT ) LANGUAGE SQLSCRIPT
  AS
	BEGIN
		SELECT PU.PROCESSINGUNITSEQ INTO o_ProcessingUnitSeq 
		FROM TCMP.CS_PROCESSINGUNIT PU
		WHERE PU.TENANTID = i_Tenant
			AND PU.NAME = i_ProcessingUnitName;
	END;
  PUBLIC FUNCTION getBuMap (i_Tenant VARCHAR2(4), i_BuName VARCHAR(255))
  RETURNS BUMAP INT AS
	BEGIN
		SELECT BU.MASK INTO BUMAP 
		FROM TCMP.CS_BUSINESSUNIT BU
		WHERE BU.TENANTID = i_Tenant
			AND BU.NAME = i_BuName;
	END;
  PUBLIC FUNCTION FT_EXISTE_TXN (par_ORDERID VARCHAR(200), par_LINENUMBER VARCHAR(50), par_SUBLINENUMBER VARCHAR(200), par_EVENTTYPEID VARCHAR(200) ) 
  RETURNS EXISTE INT AS
	BEGIN
		DECLARE v_contador INT := 0;
		
		EXISTE := 0;
		
		SELECT COUNT(*) INTO v_contador 
		FROM EXT.SALESTRANSACTION ST WHERE
			ST.ORDERID = par_ORDERID AND
			ST.LINENUMBER = par_LINENUMBER AND
			ST.SUBLINENUMBER = par_SUBLINENUMBER AND
			ST.EVENTTYPEID = par_EVENTTYPEID
		;
		
		IF v_contador > 0 THEN
			EXISTE := 1;
		END IF;
	END;
  PUBLIC PROCEDURE FT_INSERTA_HISTORICO (par_ORDERID VARCHAR(200), par_LINENUMBER VARCHAR(50), par_SUBLINENUMBER VARCHAR(200), par_EVENTTYPEID VARCHAR(200)
		, INOUT v_log_count INTEGER, proc_name VARCHAR(100), id_proceso BIGINT/*,  OUT o_PeriodSeq  BIGINT */)
  LANGUAGE SQLSCRIPT AS
	BEGIN
		--Se comenta para no escribir una fila por cada vuelta del cursor.
		--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG(proc_name, 'FT_INSERTA_HISTORICO - '||par_ORDERID||'_'||par_LINENUMBER||'_'||par_SUBLINENUMBER||'_'||par_EVENTTYPEID, v_log_count, id_proceso, 'debug');
		
		INSERT INTO EXT.SALESTRANSACTION_HIST
		SELECT
			ST.*, id_proceso
		FROM EXT.SALESTRANSACTION ST
		WHERE ST.ORDERID = par_ORDERID
			AND ST.LINENUMBER = par_LINENUMBER
			AND ST.SUBLINENUMBER = par_SUBLINENUMBER
			AND ST.EVENTTYPEID = par_EVENTTYPEID;
		
		--COMMIT;
		
		--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'FT_INSERTA_HISTORICO - INSERTA ST', v_log_count, id_proceso, 'debug');
		
		INSERT INTO EXT.TRANSACTIONASSIGN_HIST
		SELECT
			TA.*, id_proceso
		FROM EXT.TRANSACTIONASSIGN TA
		WHERE TA.ORDERID = par_ORDERID
			AND TA.LINENUMBER = par_LINENUMBER
			AND TA.SUBLINENUMBER = par_SUBLINENUMBER
			AND TA.EVENTTYPEID = par_EVENTTYPEID;
		
		--COMMIT;
		
		--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'FT_INSERTA_HISTORICO - INSERTA TA', v_log_count, id_proceso, 'debug');
		
		DELETE FROM EXT.SALESTRANSACTION ST
		WHERE ST.ORDERID = par_ORDERID
			AND ST.LINENUMBER = par_LINENUMBER
			AND ST.SUBLINENUMBER = par_SUBLINENUMBER
			AND ST.EVENTTYPEID = par_EVENTTYPEID;
		
		--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'FT_INSERTA_HISTORICO - DELETE ST', v_log_count, id_proceso, 'debug');
		
		DELETE FROM EXT.TRANSACTIONASSIGN TA
		WHERE TA.ORDERID = par_ORDERID
			AND TA.LINENUMBER = par_LINENUMBER
			AND TA.SUBLINENUMBER = par_SUBLINENUMBER
			AND TA.EVENTTYPEID = par_EVENTTYPEID;
		
		COMMIT;
		
		--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'FT_INSERTA_HISTORICO - DELETE TA', v_log_count, id_proceso, 'debug');
	END;
  PUBLIC FUNCTION FT_GET_PRODUCTO (RAMO VARCHAR(200), CONFON VARCHAR(200), CONPLAN VARCHAR(200), COSUBP VARCHAR(200), v_log_count INTEGER, proc_name VARCHAR(100),FECHA VARCHAR(8))
  RETURNS ID_PRODUCTO VARCHAR(200) AS
	BEGIN
		-- funcion libreria tiene que devolver la MODALIDAD (CLASSIFIERID) quitar la barra baja que esta en la tabla "TCMP"."CS_CLASSIFIER"
		-- consulta a los clasificados PPI --> parametros a pasar a la funcion /// CONFON (Cod.ProdOtrasCompanyias), CONPLAN (Codigo Plan), COSUBP (Codigo Subplan), ramo
		
		--CALL CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'FT_GET_PRODUCTO - '||  'RAMO: '||RAMO||' CONFON:'||CONFON||' CONPLAN:'||CONPLAN||' COSUBP:'||COSUBP ||' - '||  proc_name, v_log_count);	
		
		DECLARE v_eot DATE := EXT.LIB_CONSTANTES_SL:v_eot;
		
		SELECT CL.CLASSIFIERID INTO ID_PRODUCTO 
		FROM "TCMP"."CS_CLASSIFIER" CL 
		LEFT JOIN "TCMP"."CS_PRODUCT" PR ON PR.CLASSIFIERSEQ = CL.CLASSIFIERSEQ
			AND PR.EFFECTIVESTARTDATE <= TO_DATE(FECHA,'YYYYMMDD')
			AND PR.EFFECTIVEENDDATE > TO_DATE(FECHA,'YYYYMMDD')
		WHERE CL.CLASSIFIERID LIKE CONCAT(RAMO, '%')
			AND (PR.GENERICATTRIBUTE1 = CONFON OR (LENGTH(CONFON) = 0 AND PR.GENERICATTRIBUTE1 IS NULL))
			AND (PR.GENERICATTRIBUTE2 = CONPLAN OR (LENGTH(CONPLAN) = 0 AND PR.GENERICATTRIBUTE2 IS NULL))
			AND (PR.GENERICATTRIBUTE3 = COSUBP OR (LENGTH(COSUBP) = 0 AND PR.GENERICATTRIBUTE3 IS NULL))
			AND CL.EFFECTIVESTARTDATE <= TO_DATE(FECHA,'YYYYMMDD')
			AND CL.EFFECTIVEENDDATE > TO_DATE(FECHA,'YYYYMMDD')
			AND PR.REMOVEDATE = v_eot AND CL.REMOVEDATE = v_eot ;
		--COMMIT;
		
		--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'FT_GET_PRODUCTO - '||  'ID_PRODUCTO: '|| ID_PRODUCTO||  proc_name, v_log_count, );
	END;
  PUBLIC PROCEDURE SP_GET_POSITIONNAME (IN proc_name VARCHAR(500), INOUT v_log_count INT, IN FECHA_ACTUAL DATE, IN FECHA_JERARQUIA DATE, IN FILENAME VARCHAR(500), IN NIF_IN VARCHAR(500), IN COD_SIIS VARCHAR(500)
									, OUT PAR_TITLENAME VARCHAR(500), OUT PAR_BUSINESSUNITMAP VARCHAR(500), OUT PAR_BU VARCHAR(500)
									, OUT PAR_POSITIONNAME VARCHAR(500), OUT PAR_MANAGER1 VARCHAR(500), OUT PAR_MANAGER2 VARCHAR(500)
									, OUT PAR_MANAGER3  VARCHAR(500), OUT TIT_MAN3 VARCHAR(500), OUT TIT_MAN2 VARCHAR(500), OUT TIT_MAN1 VARCHAR(500), INOUT v_estadoPre INT
									, INOUT v_estadoStage INT, IN i_idproceso BIGINT) 
  LANGUAGE SQLSCRIPT AS
	BEGIN
		
		DECLARE v_tenantId VARCHAR(4) := EXT.LIB_CONSTANTES_SL:getTenantID();
		DECLARE v_sp_sos VARCHAR(50) := EXT.LIB_CONSTANTES_SL:STAGE_SOS;
		DECLARE v_sp_pelayo VARCHAR(50) := EXT.LIB_CONSTANTES_SL:STAGE_PELAYO;
		DECLARE v_sp_agrario VARCHAR(50) := EXT.LIB_CONSTANTES_SL:STAGE_AGRARIO;
		DECLARE v_sp_svp_ppi VARCHAR(50) := EXT.LIB_CONSTANTES_SL:STAGE_SVPPPI;
		DECLARE v_sp_svp_rentas VARCHAR(50) := EXT.LIB_CONSTANTES_SL:STAGE_SVP_RENTAS;
		DECLARE v_preError INT := EXT.LIB_CONSTANTES_SL:PRESTAGE_STATUS_ERROR;
		DECLARE v_stError INT := EXT.LIB_CONSTANTES_SL:STAGE_STATUS_ERROR;
		
		DECLARE v_payeeseq BIGINT := 0;
		
		DECLARE v_eot DATE := EXT.LIB_CONSTANTES_SL:v_eot;
		
		DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
			BEGIN
				CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG(proc_name , 'SP_GET_POSITIONNAME - Error general en: ' || FILENAME 
																		|| ' para (NIF, COD_SIIS): (' || IFNULL(NIF_IN,'NIF_IN nulo') || ', ' || IFNULL(COD_SIIS, 'COD_SIIS nulo') 
																		|| ') SQL_ERROR_MESSAGE: ' || IFNULL(::SQL_ERROR_MESSAGE,'')
																		|| '. SQL_ERROR_CODE: ' || ::SQL_ERROR_CODE, v_log_count, i_idproceso,'error');
				v_estadoPre := v_preError;
				v_estadoStage := v_stError;
			END;
		
		PAR_TITLENAME := 'NULL';
		PAR_BUSINESSUNITMAP := 'NULL'; 
		PAR_BU  := 'NULL';
		PAR_POSITIONNAME := 'NULL'; 
		PAR_MANAGER1  := 'NULL';
		PAR_MANAGER2  := 'NULL';
		PAR_MANAGER3  := 'NULL';
		TIT_MAN3   := 'NULL';
		TIT_MAN2  := 'NULL';
		TIT_MAN1   := 'NULL';
		
		--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'SP_GET_POSITIONNAME INICIO - (NIF, COD_SIIS): (' || IFNULL(NIF_IN,'NIF_IN nulo') || ', ' || IFNULL(COD_SIIS, 'COD_SIIS nulo') 
		--	|| ' - FECHA_ACTUAL: '			|| (CASE WHEN FECHA_ACTUAL IS NOT NULL THEN FECHA_ACTUAL ELSE 'NULL' END)
		--	|| ' - FECHA_JERARQUIA: '	|| (CASE WHEN FECHA_JERARQUIA IS NOT NULL THEN FECHA_JERARQUIA ELSE 'NULL' END)
		--	, v_log_count, i_idproceso, 'debug');
		
		IF proc_name = v_sp_sos THEN
			
			--Se comenta para no escribir una fila por cada vuelta del cursor.
			--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'SP_GET_POSITIONNAME - FECHA_ACTUAL: '|| FECHA_ACTUAL || ' - NIF_IN: ' || NIF_IN, v_log_count, i_idproceso);
			
			--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'SP_GET_POSITIONNAME - DENTRO IF - EXT.SP_STAGE_SOS - ' , v_log_count);
			
			SELECT 
				 TIT.NAME AS PAR_TITLENAME
				, REO.BUSINESSUNITMAP
				, (SELECT BU.NAME FROM TCMP.CS_BUSINESSUNIT BU WHERE BU.MASK = REO.BUSINESSUNITMAP) as PAR_BU		--BUSINESS UNIT
				, POS.NAME AS PAR_POSITIONNAME
				, MAN1.NAME AS PAR_MANAGER1
				, MAN2.NAME AS PAR_MANAGER2
				, MAN3.NAME AS PAR_MANAGER3
				, TIT3.NAME AS TIT_MAN3	
				, TIT2.NAME AS TIT_MAN2
				, TIT1.NAME AS TIT_MAN1
			INTO PAR_TITLENAME ,PAR_BUSINESSUNITMAP ,PAR_BU ,PAR_POSITIONNAME ,PAR_MANAGER1 ,PAR_MANAGER2 ,PAR_MANAGER3 ,TIT_MAN3 ,TIT_MAN2 ,TIT_MAN1
			FROM TCMP.CS_PAYEE PAY
			INNER JOIN TCMP.CS_PARTICIPANT PAR ON PAY.PAYEESEQ = PAR.PAYEESEQ
				AND PAR.TENANTID = v_tenantId AND PAR.REMOVEDATE = v_eot
				AND PAR.EFFECTIVESTARTDATE <= FECHA_ACTUAL AND PAR.EFFECTIVEENDDATE > FECHA_ACTUAL
			INNER JOIN TCMP.CS_POSITION POS ON POS.PAYEESEQ = PAR.PAYEESEQ 
				AND POS.TENANTID = v_tenantId AND POS.PROCESSINGUNITSEQ = 38280596832649217 AND POS.REMOVEDATE = v_eot
				AND POS.EFFECTIVESTARTDATE <= FECHA_ACTUAL AND POS.EFFECTIVEENDDATE > FECHA_ACTUAL
				AND (POS.GENERICDATE6 <= FECHA_ACTUAL AND POS.GENERICDATE5 > FECHA_ACTUAL OR POS.GENERICDATE5 IS NULL AND POS.GENERICDATE6 <= FECHA_ACTUAL)
			INNER JOIN TCMP.CS_RULEELEMENTOWNER REO ON POS.RULEELEMENTOWNERSEQ = REO.RULEELEMENTOWNERSEQ
				AND REO.TENANTID = v_tenantId AND REO.REMOVEDATE = v_eot AND REO.MODELSEQ = 0
				AND REO.EFFECTIVESTARTDATE <= FECHA_ACTUAL AND REO.EFFECTIVEENDDATE > FECHA_ACTUAL        --!!!!!!!!!!!!!!cambiado
			INNER JOIN TCMP.CS_TITLE TIT ON POS.TITLESEQ = TIT.RULEELEMENTOWNERSEQ
				AND TIT.TENANTID = v_tenantId AND TIT.REMOVEDATE = v_eot
				AND TIT.EFFECTIVESTARTDATE <= FECHA_ACTUAL AND TIT.EFFECTIVEENDDATE > FECHA_ACTUAL
			LEFT JOIN TCMP.CS_POSITION MAN1 ON POS.MANAGERSEQ = MAN1.RULEELEMENTOWNERSEQ 
				AND MAN1.TENANTID = v_tenantId AND MAN1.PROCESSINGUNITSEQ = 38280596832649217 AND MAN1.REMOVEDATE = v_eot
				AND MAN1.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND MAN1.EFFECTIVEENDDATE > FECHA_JERARQUIA
				AND MAN1.GENERICDATE6 <= FECHA_JERARQUIA AND MAN1.GENERICDATE5 > FECHA_JERARQUIA
			LEFT JOIN TCMP.CS_TITLE TIT1 ON MAN1.TITLESEQ = TIT1.RULEELEMENTOWNERSEQ
				AND TIT1.TENANTID = v_tenantId AND TIT1.REMOVEDATE = v_eot
				AND TIT1.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND TIT1.EFFECTIVEENDDATE > FECHA_JERARQUIA
			LEFT JOIN TCMP.CS_POSITION MAN2 ON MAN1.MANAGERSEQ = MAN2.RULEELEMENTOWNERSEQ 
				AND MAN2.TENANTID = v_tenantId AND MAN2.PROCESSINGUNITSEQ = 38280596832649217 AND MAN2.REMOVEDATE = v_eot
				AND MAN2.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND MAN2.EFFECTIVEENDDATE > FECHA_JERARQUIA
				AND MAN2.GENERICDATE6 <= FECHA_JERARQUIA AND MAN2.GENERICDATE5 > FECHA_JERARQUIA
			LEFT JOIN TCMP.CS_TITLE TIT2 ON MAN2.TITLESEQ = TIT2.RULEELEMENTOWNERSEQ
				AND TIT2.TENANTID = v_tenantId AND TIT2.REMOVEDATE = v_eot
				AND TIT2.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND TIT2.EFFECTIVEENDDATE > FECHA_JERARQUIA
			LEFT JOIN TCMP.CS_POSITION MAN3 ON MAN2.MANAGERSEQ = MAN3.RULEELEMENTOWNERSEQ 
				AND MAN3.TENANTID = v_tenantId AND MAN3.PROCESSINGUNITSEQ = 38280596832649217 AND MAN3.REMOVEDATE = v_eot
				AND MAN3.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND MAN3.EFFECTIVEENDDATE > FECHA_JERARQUIA
				AND MAN3.GENERICDATE6 <= FECHA_JERARQUIA AND MAN3.GENERICDATE5 > FECHA_JERARQUIA
			LEFT JOIN TCMP.CS_TITLE TIT3 ON MAN3.TITLESEQ = TIT3.RULEELEMENTOWNERSEQ
				AND TIT3.TENANTID = v_tenantId AND TIT3.REMOVEDATE = v_eot
				AND TIT3.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND TIT3.EFFECTIVEENDDATE > FECHA_JERARQUIA
			WHERE PAY.TENANTID = v_tenantId AND PAY.REMOVEDATE = v_eot 
				AND PAY.EFFECTIVESTARTDATE <= FECHA_ACTUAL AND PAY.EFFECTIVEENDDATE > FECHA_ACTUAL								
				AND PAR.genericattribute1 = NIF_IN;																			--SSMM
			
		ELSE--IF proc_name = v_sp_pelayo OR proc_name = v_sp_agrario OR proc_name = v_sp_svp_ppi OR proc_name = v_sp_svp_rentas THEN
			
			--Se comenta para no escribir una fila por cada vuelta del cursor.
			--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'SP_GET_POSITIONNAME - FECHA_ACTUAL: ' || FECHA_ACTUAL || ' - COD_SIIS: ' ||COD_SIIS, v_log_count, i_idproceso);
			
			--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'SP_GET_POSITIONNAME - DENTRO ELSE - ' || FILENAME  , v_log_count, i_idproceso, 'debug');
			
			--BEGIN
			--	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
			--		BEGIN
			--			CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG(proc_name , 'SP_GET_POSITIONNAME - Error 1 en: ' || FILENAME 
			--																	|| ' para (NIF, COD_SIIS): (' || IFNULL(NIF_IN,'NIF_IN nulo') || ', ' || IFNULL(COD_SIIS, 'COD_SIIS nulo') 
			--																	|| ') SQL_ERROR_MESSAGE: ' || IFNULL(::SQL_ERROR_MESSAGE,'')
			--																	|| '. SQL_ERROR_CODE: ' || ::SQL_ERROR_CODE, v_log_count, i_idproceso,'error');
			--			v_estadoPre := v_preError;
			--			v_estadoStage := v_stError;
			--		END;
				
				SELECT 
					 TIT.NAME AS PAR_TITLENAME
					, REO.BUSINESSUNITMAP
					, (SELECT BU.NAME FROM TCMP.CS_BUSINESSUNIT BU WHERE BU.MASK = REO.BUSINESSUNITMAP) as PAR_BU	--BUSINESS UNIT
					, POS.NAME AS PAR_POSITIONNAME
					, MAN1.NAME AS PAR_MANAGER1
					, MAN2.NAME AS PAR_MANAGER2
					, MAN3.NAME AS PAR_MANAGER3
					, TIT3.NAME AS TIT_MAN3	
					, TIT2.NAME AS TIT_MAN2
					, TIT1.NAME AS TIT_MAN1
					, PAY.PAYEESEQ
				INTO PAR_TITLENAME ,PAR_BUSINESSUNITMAP ,PAR_BU ,PAR_POSITIONNAME ,PAR_MANAGER1 ,PAR_MANAGER2 ,PAR_MANAGER3 ,TIT_MAN3 ,TIT_MAN2 ,TIT_MAN1, v_payeeseq
				FROM TCMP.CS_PAYEE PAY
				INNER JOIN TCMP.CS_PARTICIPANT PAR ON PAY.PAYEESEQ = PAR.PAYEESEQ
					AND PAR.TENANTID = v_tenantId AND PAR.REMOVEDATE = v_eot
					AND PAR.EFFECTIVESTARTDATE <= FECHA_ACTUAL AND PAR.EFFECTIVEENDDATE > FECHA_ACTUAL
				INNER JOIN TCMP.CS_POSITION POS ON POS.PAYEESEQ = PAR.PAYEESEQ 
					AND POS.TENANTID = v_tenantId AND POS.PROCESSINGUNITSEQ = 38280596832649217 AND POS.REMOVEDATE = v_eot
					AND POS.EFFECTIVESTARTDATE <= FECHA_ACTUAL AND POS.EFFECTIVEENDDATE > FECHA_ACTUAL
					AND (POS.GENERICDATE6 <= FECHA_ACTUAL AND POS.GENERICDATE5 > FECHA_ACTUAL OR POS.GENERICDATE5 IS NULL AND POS.GENERICDATE6 <= FECHA_ACTUAL)
				INNER JOIN TCMP.CS_RULEELEMENTOWNER REO ON POS.RULEELEMENTOWNERSEQ= REO.RULEELEMENTOWNERSEQ   
					AND REO.TENANTID = v_tenantId AND REO.REMOVEDATE = v_eot AND REO.MODELSEQ = 0
					AND REO.EFFECTIVESTARTDATE <= FECHA_ACTUAL AND REO.EFFECTIVEENDDATE > FECHA_ACTUAL --!!!!!!!!!!!
				INNER JOIN TCMP.CS_TITLE TIT ON POS.TITLESEQ = TIT.RULEELEMENTOWNERSEQ
					AND TIT.TENANTID = v_tenantId AND TIT.REMOVEDATE = v_eot
					AND TIT.EFFECTIVESTARTDATE <= FECHA_ACTUAL AND TIT.EFFECTIVEENDDATE > FECHA_ACTUAL
					AND TIT.NAME <> 'TTL_CO_CORREDOR' --Excluimos el title de corredor ya que comparte el NIF con el punto de venta para evitar duplicados
				LEFT JOIN TCMP.CS_POSITION MAN1 ON POS.MANAGERSEQ = MAN1.RULEELEMENTOWNERSEQ 
					AND MAN1.TENANTID = v_tenantId AND MAN1.PROCESSINGUNITSEQ = 38280596832649217 AND MAN1.REMOVEDATE = v_eot
					AND MAN1.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND MAN1.EFFECTIVEENDDATE > FECHA_JERARQUIA
					AND MAN1.GENERICDATE6 <= FECHA_JERARQUIA AND MAN1.GENERICDATE5 > FECHA_JERARQUIA
				LEFT JOIN TCMP.CS_TITLE TIT1 ON MAN1.TITLESEQ = TIT1.RULEELEMENTOWNERSEQ
					AND TIT1.TENANTID = v_tenantId AND TIT1.REMOVEDATE = v_eot
					AND TIT1.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND TIT1.EFFECTIVEENDDATE > FECHA_JERARQUIA
				LEFT JOIN TCMP.CS_POSITION MAN2 ON MAN1.MANAGERSEQ = MAN2.RULEELEMENTOWNERSEQ 
					AND MAN2.TENANTID = v_tenantId AND MAN2.PROCESSINGUNITSEQ = 38280596832649217 AND MAN2.REMOVEDATE = v_eot
					AND MAN2.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND MAN2.EFFECTIVEENDDATE > FECHA_JERARQUIA
					AND MAN2.GENERICDATE6 <= FECHA_JERARQUIA AND MAN2.GENERICDATE5 > FECHA_JERARQUIA
				LEFT JOIN TCMP.CS_TITLE TIT2 ON MAN2.TITLESEQ = TIT2.RULEELEMENTOWNERSEQ
					AND TIT2.TENANTID = v_tenantId AND TIT2.REMOVEDATE = v_eot
					AND TIT2.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND TIT2.EFFECTIVEENDDATE > FECHA_JERARQUIA
				LEFT JOIN TCMP.CS_POSITION MAN3 ON MAN2.MANAGERSEQ = MAN3.RULEELEMENTOWNERSEQ 
					AND MAN3.TENANTID = v_tenantId AND MAN3.PROCESSINGUNITSEQ = 38280596832649217 AND MAN3.REMOVEDATE = v_eot
					AND MAN3.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND MAN3.EFFECTIVEENDDATE > FECHA_JERARQUIA
					AND MAN3.GENERICDATE6 <= FECHA_JERARQUIA AND MAN3.GENERICDATE5 > FECHA_JERARQUIA
				LEFT JOIN TCMP.CS_TITLE TIT3 ON MAN3.TITLESEQ = TIT3.RULEELEMENTOWNERSEQ
					AND TIT3.TENANTID = v_tenantId AND TIT3.REMOVEDATE = v_eot
					AND TIT3.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND TIT3.EFFECTIVEENDDATE > FECHA_JERARQUIA
				WHERE PAY.TENANTID = v_tenantId AND PAY.REMOVEDATE = v_eot
					AND PAY.EFFECTIVESTARTDATE <= FECHA_ACTUAL AND PAY.EFFECTIVEENDDATE > FECHA_ACTUAL
					AND POS.genericattribute1 = COD_SIIS;
				
			--END;
			
			--ALM 20240216: Si el Title es Cobrador tenemos que coger el PositionName de la Position con Fecha Fin de Rol (GD5) nula.
			IF IFNULL(PAR_TITLENAME,'X') = 'TTL_COBRADOR_SIN_PLAN' THEN
				
				--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'SP_GET_POSITIONNAME - DENTRO IF PAR_TITLENAME - ' || IFNULL(PAR_TITLENAME,'')  , v_log_count, i_idproceso, 'debug');
				
				--BEGIN
				--	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
				--		BEGIN
				--			CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG(proc_name , 'SP_GET_POSITIONNAME - Error 2 en: ' || FILENAME 
				--																	|| ' para (NIF, COD_SIIS): (' || IFNULL(NIF_IN,'NIF_IN nulo') || ', ' || IFNULL(COD_SIIS, 'COD_SIIS nulo') 
				--																	|| ') SQL_ERROR_MESSAGE: ' || IFNULL(::SQL_ERROR_MESSAGE,'')
				--																	|| '. SQL_ERROR_CODE: ' || ::SQL_ERROR_CODE, v_log_count, i_idproceso,'error');
				--			v_estadoPre := v_preError;
				--			v_estadoStage := v_stError;
				--		END;
					
					SELECT 
						 TIT.NAME AS PAR_TITLENAME
						, REO.BUSINESSUNITMAP
						, (SELECT BU.NAME FROM TCMP.CS_BUSINESSUNIT BU WHERE BU.MASK = REO.BUSINESSUNITMAP) as PAR_BU	--BUSINESS UNIT
						, POS.NAME AS PAR_POSITIONNAME
						, MAN1.NAME AS PAR_MANAGER1
						, MAN2.NAME AS PAR_MANAGER2
						, MAN3.NAME AS PAR_MANAGER3
						, TIT3.NAME AS TIT_MAN3	
						, TIT2.NAME AS TIT_MAN2
						, TIT1.NAME AS TIT_MAN1
					INTO PAR_TITLENAME ,PAR_BUSINESSUNITMAP ,PAR_BU ,PAR_POSITIONNAME ,PAR_MANAGER1 ,PAR_MANAGER2 ,PAR_MANAGER3 ,TIT_MAN3 ,TIT_MAN2 ,TIT_MAN1
					FROM TCMP.CS_PAYEE PAY
					INNER JOIN TCMP.CS_PARTICIPANT PAR ON PAY.PAYEESEQ = PAR.PAYEESEQ
						AND PAR.TENANTID = v_tenantId AND PAR.REMOVEDATE = v_eot
						AND PAR.EFFECTIVESTARTDATE <= FECHA_ACTUAL AND PAR.EFFECTIVEENDDATE > FECHA_ACTUAL
					INNER JOIN TCMP.CS_POSITION POS ON POS.PAYEESEQ = PAR.PAYEESEQ 
						AND POS.TENANTID = v_tenantId AND POS.PROCESSINGUNITSEQ = 38280596832649217 AND POS.REMOVEDATE = v_eot
						AND POS.EFFECTIVESTARTDATE <= FECHA_ACTUAL AND POS.EFFECTIVEENDDATE > FECHA_ACTUAL
					INNER JOIN TCMP.CS_RULEELEMENTOWNER REO ON POS.RULEELEMENTOWNERSEQ= REO.RULEELEMENTOWNERSEQ   
						AND REO.TENANTID = v_tenantId AND REO.REMOVEDATE = v_eot AND REO.MODELSEQ = 0
						AND REO.EFFECTIVESTARTDATE <= FECHA_ACTUAL AND REO.EFFECTIVEENDDATE > FECHA_ACTUAL --!!!!!!!!!!!
					INNER JOIN TCMP.CS_TITLE TIT ON POS.TITLESEQ = TIT.RULEELEMENTOWNERSEQ
						AND TIT.TENANTID = v_tenantId AND TIT.REMOVEDATE = v_eot
						AND TIT.EFFECTIVESTARTDATE <= FECHA_ACTUAL AND TIT.EFFECTIVEENDDATE > FECHA_ACTUAL
						AND TIT.NAME <> 'TTL_CO_CORREDOR' --Excluimos el title de corredor ya que comparte el NIF con el punto de venta para evitar duplicados
					LEFT JOIN TCMP.CS_POSITION MAN1 ON POS.MANAGERSEQ = MAN1.RULEELEMENTOWNERSEQ 
						AND MAN1.TENANTID = v_tenantId AND MAN1.PROCESSINGUNITSEQ = 38280596832649217 AND MAN1.REMOVEDATE = v_eot
						AND MAN1.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND MAN1.EFFECTIVEENDDATE > FECHA_JERARQUIA
					LEFT JOIN TCMP.CS_TITLE TIT1 ON MAN1.TITLESEQ = TIT1.RULEELEMENTOWNERSEQ
						AND TIT1.TENANTID = v_tenantId AND TIT1.REMOVEDATE = v_eot
						AND TIT1.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND TIT1.EFFECTIVEENDDATE > FECHA_JERARQUIA
					LEFT JOIN TCMP.CS_POSITION MAN2 ON MAN1.MANAGERSEQ = MAN2.RULEELEMENTOWNERSEQ 
						AND MAN2.TENANTID = v_tenantId AND MAN2.PROCESSINGUNITSEQ = 38280596832649217 AND MAN2.REMOVEDATE = v_eot
						AND MAN2.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND MAN2.EFFECTIVEENDDATE > FECHA_JERARQUIA
					LEFT JOIN TCMP.CS_TITLE TIT2 ON MAN2.TITLESEQ = TIT2.RULEELEMENTOWNERSEQ
						AND TIT2.TENANTID = v_tenantId AND TIT2.REMOVEDATE = v_eot
						AND TIT2.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND TIT2.EFFECTIVEENDDATE > FECHA_JERARQUIA
					LEFT JOIN TCMP.CS_POSITION MAN3 ON MAN2.MANAGERSEQ = MAN3.RULEELEMENTOWNERSEQ 
						AND MAN3.TENANTID = v_tenantId AND MAN3.PROCESSINGUNITSEQ = 38280596832649217 AND MAN3.REMOVEDATE = v_eot
						AND MAN3.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND MAN3.EFFECTIVEENDDATE > FECHA_JERARQUIA
					LEFT JOIN TCMP.CS_TITLE TIT3 ON MAN3.TITLESEQ = TIT3.RULEELEMENTOWNERSEQ
						AND TIT3.TENANTID = v_tenantId AND TIT3.REMOVEDATE = v_eot
						AND TIT3.EFFECTIVESTARTDATE <= FECHA_JERARQUIA AND TIT3.EFFECTIVEENDDATE > FECHA_JERARQUIA
					WHERE PAY.TENANTID = v_tenantId AND PAY.REMOVEDATE = v_eot
						AND PAY.EFFECTIVESTARTDATE <= FECHA_ACTUAL AND PAY.EFFECTIVEENDDATE > FECHA_ACTUAL
						AND PAY.PAYEESEQ = v_payeeseq
						AND POS.GENERICDATE5 IS NULL
						AND TIT.NAME <> 'TTL_COBRADOR_SIN_PLAN';
					
				--END;
			--ELSE
			--	CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'SP_GET_POSITIONNAME - DENTRO ELSE PAR_TITLENAME - ' || IFNULL(PAR_TITLENAME,'')  , v_log_count, i_idproceso, 'debug');
			END IF;
		END IF;
		
		--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'SP_GET_POSITIONNAME ', v_log_count);
		
		--Se comenta para no escribir una fila por cada vuelta del cursor.
		CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'SP_GET_POSITIONNAME - (NIF, COD_SIIS): (' || IFNULL(NIF_IN,'NIF_IN nulo') || ', ' || IFNULL(COD_SIIS, 'COD_SIIS nulo') 
			|| ' - TITLENAME: '			|| (CASE WHEN PAR_TITLENAME IS NOT NULL THEN PAR_TITLENAME ELSE 'NULL' END)
			|| ' - BUSINESSUNITMAP: '	|| (CASE WHEN PAR_BUSINESSUNITMAP IS NOT NULL THEN PAR_BUSINESSUNITMAP ELSE 'NULL' END)
			|| ' - BU: '				|| (CASE WHEN PAR_BU IS NOT NULL THEN PAR_BU ELSE 'NULL' END)
			|| ' - POSITIONNAME: '		|| (CASE WHEN PAR_POSITIONNAME IS NOT NULL THEN PAR_POSITIONNAME ELSE 'NULL'	END)
			|| ' - MANAGER1: '			|| (CASE WHEN PAR_MANAGER1 IS NOT NULL THEN PAR_MANAGER1 ELSE 'NULL' END)
			|| ' - MANAGER2: '			|| (CASE WHEN PAR_MANAGER2 IS NOT NULL THEN PAR_MANAGER2 ELSE 'NULL' END)
			|| ' - MANAGER3: '			|| (CASE WHEN PAR_MANAGER3 IS NOT NULL THEN PAR_MANAGER3 ELSE 'NULL' END)
			|| ' - TIT_MAN3: '			|| (CASE WHEN TIT_MAN3 IS NOT NULL THEN TIT_MAN3 ELSE 'NULL' END)																			
			, v_log_count, i_idproceso, 'debug');
	END;
  PUBLIC PROCEDURE SP_INSERT_INTO_SALESTRANSACTION (IN TABLE_ST TABLE(
			i_Tenant VARCHAR(4)
			, FILENAME VARCHAR(90)
			, ORDERID VARCHAR(40)
			, LINENUMBER BIGINT
			, SUBLINENUMBER BIGINT
			, EVENTTYPEID VARCHAR(40)
			, SALESTRANSACTIONSEQ BIGINT
			, SALESORDERSEQ BIGINT
			, ACCOUNTINGDATE LONGDATE
			, PRODUCTID NVARCHAR(127)
			, PRODUCTNAME NVARCHAR(127)
			, PRODUCTDESCRIPTION NVARCHAR(127)
			, VALUE DECIMAL(25,10)
			, UNITTYPEFORVALUE VARCHAR(255)
			, NUMBEROFUNITS DECIMAL(25,10)
			, UNITVALUE DECIMAL(25,10)
			, UNITTYPEFORUNITVALUE VARCHAR(40)
			, COMPENSATIONDATE LONGDATE
			, PAYMENTTERMS VARCHAR(10)
			, PONUMBER VARCHAR(30)
			, CHANNEL VARCHAR(20)
			, ALTERNATEORDERNUMBER VARCHAR(40)
			, DATASOURCE VARCHAR(20)
			, NATIVECURRENCY VARCHAR(40)
			, NATIVECURRENCYAMOUNT DECIMAL(25,10)
			, DISCOUNTPERCENT DECIMAL(25,10)
			, DISCOUNTTYPE VARCHAR(20)
			, BILLTOCUSTID VARCHAR(50)
			, BILLTOCONTACT VARCHAR(127)
			, BILLTOCOMPANY VARCHAR(90)
			, BILLTOAREACODE VARCHAR(5)
			, BILLTOPHONE VARCHAR(35)
			, BILLTOFAX VARCHAR(35)
			, BILLTOADDRESS1 VARCHAR(255)
			, BILLTOADDRESS2 VARCHAR(255)
			, BILLTOADDRESS3 VARCHAR(255)
			, BILLTOCITY VARCHAR(90)
			, BILLTOSTATE VARCHAR(90)
			, BILLTOCOUNTRY VARCHAR(90)
			, BILLTOPOSTALCODE VARCHAR(40)
			, BILLTOINDUSTRY VARCHAR(100)
			, BILLTOGEOGRAPHY VARCHAR(100)
			, SHIPTOCUSTID VARCHAR(50)
			, SHIPTOCONTACT VARCHAR(127)
			, SHIPTOCOMPANY VARCHAR(90)
			, SHIPTOAREACODE VARCHAR(5)
			, SHIPTOPHONE VARCHAR(35)
			, SHIPTOFAX VARCHAR(35)
			, SHIPTOADDRESS1 VARCHAR(255)
			, SHIPTOADDRESS2 VARCHAR(255)
			, SHIPTOADDRESS3 VARCHAR(255)
			, SHIPTOCITY VARCHAR(90)
			, SHIPTOSTATE VARCHAR(90)
			, SHIPTOCOUNTRY VARCHAR(90)
			, SHIPTOPOSTALCODE VARCHAR(40)
			, SHIPTOINDUSTRY VARCHAR(100)
			, SHIPTOGEOGRAPHY VARCHAR(100)
			, OTHERTOCUSTID VARCHAR(50)
			, OTHERTOCONTACT VARCHAR(127)
			, OTHERTOCOMPANY VARCHAR(90)
			, OTHERTOAREACODE VARCHAR(5)
			, OTHERTOPHONE VARCHAR(35)
			, OTHERTOFAX VARCHAR(35)
			, OTHERTOADDRESS1 VARCHAR(255)
			, OTHERTOADDRESS2 VARCHAR(255)
			, OTHERTOADDRESS3 VARCHAR(255)
			, OTHERTOCITY VARCHAR(90)
			, OTHERTOSTATE VARCHAR(90)
			, OTHERTOCOUNTRY VARCHAR(90)
			, OTHERTOPOSTALCODE VARCHAR(40)
			, OTHERTOINDUSTRY VARCHAR(100)
			, OTHERTOGEOGRAPHY VARCHAR(100)
			, REASONID VARCHAR(40)
			, COMMENTS VARCHAR(255)
			, STAGEPROCESSDATE LONGDATE
			, STAGEPROCESSFLAG SMALLINT
			, BUSINESSUNITNAME VARCHAR(255)
			, BUSINESSUNITMAP BIGINT
			, GENERICATTRIBUTE1 VARCHAR(255)
			, GENERICATTRIBUTE2 VARCHAR(255)
			, GENERICATTRIBUTE3 VARCHAR(255)
			, GENERICATTRIBUTE4 VARCHAR(255)
			, GENERICATTRIBUTE5 VARCHAR(255)
			, GENERICATTRIBUTE6 VARCHAR(255)
			, GENERICATTRIBUTE7 VARCHAR(255)
			, GENERICATTRIBUTE8 VARCHAR(255)
			, GENERICATTRIBUTE9 VARCHAR(255)
			, GENERICATTRIBUTE10 VARCHAR(255)
			, GENERICATTRIBUTE11 VARCHAR(255)
			, GENERICATTRIBUTE12 VARCHAR(255)
			, GENERICATTRIBUTE13 VARCHAR(255)
			, GENERICATTRIBUTE14 VARCHAR(255)
			, GENERICATTRIBUTE15 VARCHAR(255)
			, GENERICATTRIBUTE16 VARCHAR(255)
			, GENERICATTRIBUTE17 VARCHAR(255)
			, GENERICATTRIBUTE18 VARCHAR(255)
			, GENERICATTRIBUTE19 VARCHAR(255)
			, GENERICATTRIBUTE20 VARCHAR(255)
			, GENERICATTRIBUTE21 VARCHAR(255)
			, GENERICATTRIBUTE22 VARCHAR(255)
			, GENERICATTRIBUTE23 VARCHAR(255)
			, GENERICATTRIBUTE24 VARCHAR(255)
			, GENERICATTRIBUTE25 VARCHAR(255)
			, GENERICATTRIBUTE26 VARCHAR(255)
			, GENERICATTRIBUTE27 VARCHAR(255)
			, GENERICATTRIBUTE28 VARCHAR(255)
			, GENERICATTRIBUTE29 VARCHAR(255)
			, GENERICATTRIBUTE30 VARCHAR(255)
			, GENERICATTRIBUTE31 VARCHAR(255)
			, GENERICATTRIBUTE32 VARCHAR(255)
			, GENERICNUMBER1 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER1 VARCHAR(40)
			, GENERICNUMBER2 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER2 VARCHAR(40)
			, GENERICNUMBER3 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER3 VARCHAR(40)
			, GENERICNUMBER4 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER4 VARCHAR(40)
			, GENERICNUMBER5 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER5 VARCHAR(40)
			, GENERICNUMBER6 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER6 VARCHAR(40)
			, GENERICDATE1 LONGDATE
			, GENERICDATE2 LONGDATE
			, GENERICDATE3 LONGDATE
			, GENERICDATE4 LONGDATE
			, GENERICDATE5 LONGDATE
			, GENERICDATE6 LONGDATE
			, GENERICBOOLEAN1 SMALLINT
			, GENERICBOOLEAN2 SMALLINT
			, GENERICBOOLEAN3 SMALLINT
			, GENERICBOOLEAN4 SMALLINT
			, GENERICBOOLEAN5 SMALLINT
			, GENERICBOOLEAN6 SMALLINT
			, STAGEERRORCODE BIGINT
			, COMPENSATIONDATE_OLD LONGDATE
			, PUSEQ_OLD BIGINT
  )
		, IN v_indice BIGINT, INOUT v_log_count INT, IN proc_name VARCHAR(255), INOUT v_estadoPre INT, INOUT v_estadoStage INT, IN i_idproceso BIGINT)
  LANGUAGE SQLScript AS
	BEGIN
		DECLARE num_rows INTEGER := 0;
		DECLARE v_preError INT := EXT.LIB_CONSTANTES_SL:PRESTAGE_STATUS_ERROR;
		DECLARE v_stError INT := EXT.LIB_CONSTANTES_SL:STAGE_STATUS_ERROR;
		
		DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
			BEGIN
				CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG(proc_name , 'SP_INSERT_INTO_SALESTRANSACTION - SQL_ERROR_MESSAGE: ' || IFNULL(::SQL_ERROR_MESSAGE,'') 
																								|| '. SQL_ERROR_CODE: ' || ::SQL_ERROR_CODE, v_log_count, i_idproceso, 'error');
				v_estadoPre := v_preError;
				v_estadoStage := v_stError;
			END;
		/*
		CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'INSERT_INTO_ST_1' || ' - FILENAME: ' || (SELECT FILENAME FROM :TABLE_ST)
				|| ' - ORDERID: ' || CASE WHEN (SELECT ORDERID FROM :TABLE_ST) IS NOT NULL THEN (SELECT ORDERID FROM :TABLE_ST) ELSE 'NULL' END
				|| ' - LINENUMBER: ' || CASE WHEN (SELECT LINENUMBER FROM :TABLE_ST) IS NOT NULL THEN (SELECT LINENUMBER FROM :TABLE_ST) ELSE 'NULL' END
				|| ' - SUBLINENUMBER: ' || CASE WHEN (SELECT SUBLINENUMBER FROM :TABLE_ST) IS NOT NULL THEN (SELECT SUBLINENUMBER FROM :TABLE_ST) ELSE 'NULL' END
				|| ' - EVENTTYPEID: ' || CASE WHEN (SELECT EVENTTYPEID FROM :TABLE_ST) IS NOT NULL THEN (SELECT EVENTTYPEID FROM :TABLE_ST) ELSE 'NULL' END
				|| ' - PRODUCTID: '	|| CASE WHEN (SELECT PRODUCTID FROM :TABLE_ST) IS NOT NULL THEN (SELECT PRODUCTID FROM :TABLE_ST) ELSE 'NULL' END
			, v_log_count);
		
		CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'INSERT_INTO_ST_2' || ' - FILENAME: ' || (SELECT FILENAME FROM :TABLE_ST)
				|| ' - VALUE: ' || CASE WHEN (SELECT VALUE FROM :TABLE_ST) IS NOT NULL THEN (SELECT VALUE FROM :TABLE_ST) ELSE 'NULL' END
				|| ' - UNITTYPEFORVALUE: ' || CASE WHEN (SELECT UNITTYPEFORVALUE FROM :TABLE_ST) IS NOT NULL THEN (SELECT UNITTYPEFORVALUE FROM :TABLE_ST) ELSE 'NULL' END
				|| ' - COMPENSATIONDATE: ' || CASE WHEN (SELECT COMPENSATIONDATE FROM :TABLE_ST) IS NOT NULL THEN (SELECT COMPENSATIONDATE FROM :TABLE_ST) ELSE 'NULL' END
				|| ' - NATIVECURRENCYAMOUNT: ' || CASE WHEN (SELECT NATIVECURRENCYAMOUNT FROM :TABLE_ST) IS NOT NULL THEN (SELECT NATIVECURRENCYAMOUNT FROM :TABLE_ST) ELSE 'NULL' END
				|| ' - DISCOUNTPERCENT: ' || CASE WHEN (SELECT DISCOUNTPERCENT FROM :TABLE_ST) IS NOT NULL THEN (SELECT DISCOUNTPERCENT FROM :TABLE_ST) ELSE 'NULL' END					
			, v_log_count);	
		
		CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'INSERT_INTO_ST_3'	|| ' - FILENAME: ' || (SELECT FILENAME FROM :TABLE_ST)
				|| ' - BUSINESSUNITNAME: ' || CASE WHEN (SELECT BUSINESSUNITNAME FROM :TABLE_ST) IS NOT NULL THEN (SELECT BUSINESSUNITNAME FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - BUSINESSUNITMAP: ' || CASE WHEN (SELECT BUSINESSUNITMAP FROM :TABLE_ST) IS NOT NULL THEN (SELECT BUSINESSUNITMAP FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GA1: ' || CASE WHEN (SELECT GENERICATTRIBUTE1 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICATTRIBUTE1 FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GA2: ' || CASE WHEN (SELECT GENERICATTRIBUTE2 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICATTRIBUTE2 FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GA3: ' || CASE WHEN (SELECT GENERICATTRIBUTE3 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICATTRIBUTE3 FROM :TABLE_ST) ELSE 'NULL' END	
			, v_log_count);
		
		CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'INSERT_INTO_ST_5'	|| ' - FILENAME: ' || (SELECT FILENAME FROM :TABLE_ST)
				|| ' - GA5: ' ||  CASE WHEN (SELECT GENERICATTRIBUTE5 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICATTRIBUTE5 FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GA6: ' ||  CASE WHEN (SELECT GENERICATTRIBUTE6 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICATTRIBUTE6 FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GA10: ' ||  CASE WHEN (SELECT GENERICATTRIBUTE10 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICATTRIBUTE10 FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GA11: '	||  CASE WHEN (SELECT GENERICATTRIBUTE11 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICATTRIBUTE11 FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GD1: '	|| CASE WHEN (SELECT GENERICDATE1 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICDATE1 FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GD2: '	||  CASE WHEN (SELECT GENERICDATE2 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICDATE2 FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GD3: '	||  CASE WHEN (SELECT GENERICDATE3 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICDATE3 FROM :TABLE_ST) ELSE 'NULL' END	
			, v_log_count);
		*/	
		INSERT INTO EXT.SALESTRANSACTION
		SELECT  
			FILENAME --'TXSTA_PRD_' || TO_CHAR(CURRENT_DATE,'YYYYMMDD') || '_' || FILENAME --"FILE_NAME_OUT"
			, FILENAME --"FILE_NAME_IN" 
			, i_Tenant --"TENANTID"
			, v_indice --"STAGESALESTRANSACTIONSEQ"
			, FILENAME --"BATCHNAME"	
			, ORDERID  --"ORDERID"
			, LINENUMBER  --"LINENUMBER"   
			, SUBLINENUMBER  --"SUBLINENUMBER"                    
			, EVENTTYPEID   --"EVENTTYPEID"                       
			, SALESTRANSACTIONSEQ --"SALESTRANSACTIONSEQ"
			, SALESORDERSEQ --"SALESORDERSEQ"
			, ACCOUNTINGDATE --"ACCOUNTINGDATE"
			, PRODUCTID --"PRODUCTID"			--viene de la funcion LIB_GLOBAL_SL:FT_GET_PRODUCTO///
			, PRODUCTNAME --"PRODUCTNAME"
			, PRODUCTDESCRIPTION --"PRODUCTDESCRIPTION"
			, VALUE --CUR_SOS.IMP_BASE --"VALUE"                             
			, UNITTYPEFORVALUE --'EUR' --"UNITTYPEFORVALUE"
			, NUMBEROFUNITS --"NUMBEROFUNITS"
			, UNITVALUE --"UNITVALUE"
			, UNITTYPEFORUNITVALUE --"UNITTYPEFORUNITVALUE"
			, COMPENSATIONDATE  		--"COMPENSATIONDATE"   
			, PAYMENTTERMS --"PAYMENTTERMS"
			, PONUMBER --"PONUMBER"
			, CHANNEL --"CHANNEL"
			, ALTERNATEORDERNUMBER --"ALTERNATEORDERNUMBER"
			, DATASOURCE --"DATASOURCE"
			, NATIVECURRENCY --"NATIVECURRENCY"
			, NATIVECURRENCYAMOUNT --"NATIVECURRENCYAMOUNT"           
			, DISCOUNTPERCENT --"DISCOUNTPERCENT"
			, DISCOUNTTYPE --"DISCOUNTTYPE"
			, BILLTOCUSTID --"BILLTOCUSTID"
			, BILLTOCONTACT /*"BILLTOCONTACT"*/
			, BILLTOCOMPANY /*"BILLTOCOMPANY"*/ 
			, BILLTOAREACODE /*"BILLTOAREACODE"*/
			, BILLTOPHONE /*"BILLTOPHONE"*/
			, BILLTOFAX /*"BILLTOFAX"*/
			, BILLTOADDRESS1 /*"BILLTOADDRESS1"*/
			, BILLTOADDRESS2 /*"BILLTOADDRESS2"*/
			, BILLTOADDRESS3 /*"BILLTOADDRESS3"*/
			, BILLTOCITY /*"BILLTOCITY"*/ 
			, BILLTOSTATE /*"BILLTOSTATE"*/
			, BILLTOCOUNTRY /*"BILLTOCOUNTRY"*/
			, BILLTOPOSTALCODE /*"BILLTOPOSTALCODE"*/
			, BILLTOINDUSTRY /*"BILLTOINDUSTRY"*/
			, BILLTOGEOGRAPHY /*"BILLTOGEOGRAPHY"*/
			, SHIPTOCUSTID /*"SHIPTOCUSTID"*/
			, SHIPTOCONTACT /*"SHIPTOCONTACT"*/
			, SHIPTOCOMPANY /*"SHIPTOCOMPANY"*/
			, SHIPTOAREACODE /*"SHIPTOAREACODE"*/
			, SHIPTOPHONE /*"SHIPTOPHONE"*/
			, SHIPTOFAX /*"SHIPTOFAX"*/
			, SHIPTOADDRESS1 /*"SHIPTOADDRESS1"*/
			, SHIPTOADDRESS2 /*"SHIPTOADDRESS2"*/
			, SHIPTOADDRESS3 /*"SHIPTOADDRESS3"*/
			, SHIPTOCITY /*"SHIPTOCITY"*/
			, SHIPTOSTATE /*"SHIPTOSTATE"*/
			, SHIPTOCOUNTRY /*"SHIPTOCOUNTRY"*/
			, SHIPTOPOSTALCODE /*"SHIPTOPOSTALCODE"*/
			, SHIPTOINDUSTRY /*"SHIPTOINDUSTRY"*/
			, SHIPTOGEOGRAPHY /*"SHIPTOGEOGRAPHY"*/
			, OTHERTOCUSTID /*"OTHERTOCUSTID"*/
			, OTHERTOCONTACT /*"OTHERTOCONTACT"*/
			, OTHERTOCOMPANY /*"OTHERTOCOMPANY"*/
			, OTHERTOAREACODE /*"OTHERTOAREACODE"*/
			, OTHERTOPHONE /*"OTHERTOPHONE"*/
			, OTHERTOFAX /*"OTHERTOFAX"*/
			, OTHERTOADDRESS1 /*"OTHERTOADDRESS1"*/
			, OTHERTOADDRESS2 /*"OTHERTOADDRESS2"*/
			, OTHERTOADDRESS3 /*"OTHERTOADDRESS3"*/
			, OTHERTOCITY /*"OTHERTOCITY"*/
			, OTHERTOSTATE /*"OTHERTOSTATE"*/
			, OTHERTOCOUNTRY /*"OTHERTOCOUNTRY"*/
			, OTHERTOPOSTALCODE /*"OTHERTOPOSTALCODE"*/
			, OTHERTOINDUSTRY /*"OTHERTOINDUSTRY"*/
			, OTHERTOGEOGRAPHY /*"OTHERTOGEOGRAPHY"*/
			, REASONID /*"REASONID"*/               --Must pre-exist in Commissions.
			, COMMENTS /*"COMMENTS"*/
			, STAGEPROCESSDATE --"STAGEPROCESSDATE"
			, STAGEPROCESSFLAG --"STAGEPROCESSFLAG"
			, BUSINESSUNITNAME --NULL /*"BUSINESSUNITNAME"*/            					--Must pre-exist in Commissions.
			, BUSINESSUNITMAP  --NULL /*"BUSINESSUNITMAP"*/									
			, GENERICATTRIBUTE1 /*"GENERICATTRIBUTE1"*/            	
			, GENERICATTRIBUTE2   /*"GENERICATTRIBUTE2"*/          	
			, GENERICATTRIBUTE3  /*"GENERICATTRIBUTE3"*/  							
			, GENERICATTRIBUTE4 /*"GENERICATTRIBUTE4"*/              									
			, GENERICATTRIBUTE5  /*"GENERICATTRIBUTE5"*/             
			, GENERICATTRIBUTE6  /*"GENERICATTRIBUTE6"*/
			, GENERICATTRIBUTE7 /*"GENERICATTRIBUTE7"*/
			, GENERICATTRIBUTE8 /*"GENERICATTRIBUTE8"*/
			, GENERICATTRIBUTE9 /*"GENERICATTRIBUTE9"*/
			, GENERICATTRIBUTE10 /*"GENERICATTRIBUTE10"*/      
			, GENERICATTRIBUTE11 /*"GENERICATTRIBUTE11"*/		 
			, GENERICATTRIBUTE12 /*"GENERICATTRIBUTE12"*/
			, GENERICATTRIBUTE13 /*"GENERICATTRIBUTE13"*/
			, GENERICATTRIBUTE14 /*"GENERICATTRIBUTE14"*/
			, GENERICATTRIBUTE15 /*"GENERICATTRIBUTE15"*/
			, GENERICATTRIBUTE16 /*"GENERICATTRIBUTE16"*/
			, GENERICATTRIBUTE17 /*"GENERICATTRIBUTE17"*/
			, GENERICATTRIBUTE18 /*"GENERICATTRIBUTE18"*/
			, GENERICATTRIBUTE19 /*"GENERICATTRIBUTE19"*/
			, GENERICATTRIBUTE20 /*"GENERICATTRIBUTE20"*/
			, GENERICATTRIBUTE21 /*"GENERICATTRIBUTE21"*/
			, GENERICATTRIBUTE22 /*"GENERICATTRIBUTE22"*/
			, GENERICATTRIBUTE23 /*"GENERICATTRIBUTE23"*/
			, GENERICATTRIBUTE24 /*"GENERICATTRIBUTE24"*/
			, GENERICATTRIBUTE25 /*"GENERICATTRIBUTE25"*/
			, GENERICATTRIBUTE26 /*"GENERICATTRIBUTE26"*/
			, GENERICATTRIBUTE27 /*"GENERICATTRIBUTE27"*/
			, GENERICATTRIBUTE28 /*"GENERICATTRIBUTE28"*/
			, GENERICATTRIBUTE29 /*"GENERICATTRIBUTE29"*/
			, GENERICATTRIBUTE30 /*"GENERICATTRIBUTE30"*/
			, GENERICATTRIBUTE31 /*"GENERICATTRIBUTE31"*/
			, GENERICATTRIBUTE32 /*"GENERICATTRIBUTE32"*/
			, GENERICNUMBER1 /*"GENERICNUMBER1"*/                   
			, UNITTYPEFORGENERICNUMBER1 /*"UNITTYPEFORGENERICNUMBER1"*/
			, GENERICNUMBER2 /*"GENERICNUMBER2"*/
			, UNITTYPEFORGENERICNUMBER2 /*"UNITTYPEFORGENERICNUMBER2"*/
			, GENERICNUMBER3 /*"GENERICNUMBER3"*/
			, UNITTYPEFORGENERICNUMBER3 /*"UNITTYPEFORGENERICNUMBER3"*/
			, GENERICNUMBER4 /*"GENERICNUMBER4"*/
			, UNITTYPEFORGENERICNUMBER4 /*"UNITTYPEFORGENERICNUMBER4"*/
			, GENERICNUMBER5 /*"GENERICNUMBER5"*/
			, UNITTYPEFORGENERICNUMBER5 /*"UNITTYPEFORGENERICNUMBER5"*/
			, GENERICNUMBER6 /*"GENERICNUMBER6"*/
			, UNITTYPEFORGENERICNUMBER6 /*"UNITTYPEFORGENERICNUMBER6"*/
			, GENERICDATE1  /*"GENERICDATE1"*/                     
			, GENERICDATE2  /*"GENERICDATE2"*/
			, GENERICDATE3  /*"GENERICDATE3"*/
			, GENERICDATE4 /*"GENERICDATE4"*/
			, GENERICDATE5 /*"GENERICDATE5"*/
			, GENERICDATE6 /*"GENERICDATE6"*/
			, GENERICBOOLEAN1 /*"GENERICBOOLEAN1"*/
			, GENERICBOOLEAN2 /*"GENERICBOOLEAN2"*/
			, GENERICBOOLEAN3 /*"GENERICBOOLEAN3"*/
			, GENERICBOOLEAN4 /*"GENERICBOOLEAN4"*/
			, GENERICBOOLEAN5 /*"GENERICBOOLEAN5"*/
			, GENERICBOOLEAN6 /*"GENERICBOOLEAN6"*/
			, STAGEERRORCODE /*"STAGEERRORCODE"*/
			, COMPENSATIONDATE_OLD /*"COMPENSATIONDATE_OLD"*/
			, PUSEQ_OLD /*"PUSEQ_OLD"*/
		FROM :TABLE_ST;
		
		num_rows := ::rowcount;
		COMMIT;
		
		--Se comenta para no escribir una fila por cada vuelta del cursor.
		--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG(proc_name, 'Fin insercion EXT.SALESTRANSACTION: ' || num_rows || ' filas para el fichero ' || (SELECT FILENAME FROM :TABLE_ST), v_log_count, i_idproceso);
	END;
  PUBLIC PROCEDURE SP_INSERT_INTO_TRANSACTIONASSIGN (IN TABLE_TA TABLE(
			i_Tenant VARCHAR(4)
			, FILENAME VARCHAR(90)
			, ORDERID VARCHAR(40)
			, LINENUMBER BIGINT
			, SUBLINENUMBER BIGINT
			, EVENTTYPEID VARCHAR(40)
			, SALESTRANSACTIONSEQ BIGINT
			, PAYEEID VARCHAR(40)
			, PAYEETYPE VARCHAR(40)
			, POSITIONNAME VARCHAR(127)
			, TITLENAME VARCHAR(127)
			, GENERICATTRIBUTE1 VARCHAR(255)
			, GENERICATTRIBUTE2 VARCHAR(255)
			, GENERICATTRIBUTE3 VARCHAR(255)
			, GENERICATTRIBUTE4 VARCHAR(255)
			, GENERICATTRIBUTE5 VARCHAR(255)
			, GENERICATTRIBUTE6 VARCHAR(255)
			, GENERICATTRIBUTE7 VARCHAR(255)
			, GENERICATTRIBUTE8 VARCHAR(255)
			, GENERICATTRIBUTE9 VARCHAR(255)
			, GENERICATTRIBUTE10 VARCHAR(255)
			, GENERICATTRIBUTE11 VARCHAR(255)
			, GENERICATTRIBUTE12 VARCHAR(255)
			, GENERICATTRIBUTE13 VARCHAR(255)
			, GENERICATTRIBUTE14 VARCHAR(255)
			, GENERICATTRIBUTE15 VARCHAR(255)
			, GENERICATTRIBUTE16 VARCHAR(255)
			, GENERICNUMBER1 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER1 VARCHAR(40)
			, GENERICNUMBER2 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER2 VARCHAR(40)
			, GENERICNUMBER3 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER3 VARCHAR(40)
			, GENERICNUMBER4 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER4 VARCHAR(40)
			, GENERICNUMBER5 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER5 VARCHAR(40)
			, GENERICNUMBER6 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER6 VARCHAR(40)
			, GENERICDATE1 LONGDATE
			, GENERICDATE2 LONGDATE
			, GENERICDATE3 LONGDATE
			, GENERICDATE4 LONGDATE
			, GENERICDATE5 LONGDATE
			, GENERICDATE6 LONGDATE
			, GENERICBOOLEAN1 SMALLINT
			, GENERICBOOLEAN2 SMALLINT
			, GENERICBOOLEAN3 SMALLINT
			, GENERICBOOLEAN4 SMALLINT
			, GENERICBOOLEAN5 SMALLINT
			, GENERICBOOLEAN6 SMALLINT
		)
		, IN v_indice BIGINT, INOUT v_log_count INT, IN proc_name VARCHAR(255), INOUT v_estadoPre INT, INOUT v_estadoStage INT, IN i_idproceso BIGINT )
  LANGUAGE SQLScript AS
	BEGIN
		DECLARE num_rows INTEGER := 0;
		DECLARE v_existe_trx INTEGER := 0;
		DECLARE v_setnumber INTEGER := 1;
		DECLARE v_preError INT := EXT.LIB_CONSTANTES_SL:PRESTAGE_STATUS_ERROR;
		DECLARE v_stError INT := EXT.LIB_CONSTANTES_SL:STAGE_STATUS_ERROR;

		DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
			BEGIN
				CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG(proc_name , 'SP_INSERT_INTO_TRANSACTIONASSIGN - SQL_ERROR_MESSAGE: ' || IFNULL(::SQL_ERROR_MESSAGE,'') 
																								|| '. SQL_ERROR_CODE: ' || ::SQL_ERROR_CODE, v_log_count, i_idproceso ,'error');
				v_estadoPre := v_preError;
				v_estadoStage := v_stError;
			END;
		
		SELECT COUNT(*) INTO v_existe_trx
		FROM EXT.TRANSACTIONASSIGN TA
		WHERE TA.ORDERID = (SELECT ORDERID FROM :TABLE_TA)
			AND TA.LINENUMBER = (SELECT LINENUMBER FROM :TABLE_TA)
			AND TA.SUBLINENUMBER = (SELECT SUBLINENUMBER FROM :TABLE_TA)
			AND TA.EVENTTYPEID = (SELECT EVENTTYPEID FROM :TABLE_TA);
		
		IF v_existe_trx > 0 THEN
			SELECT MAX(SETNUMBER) INTO v_setnumber
			FROM EXT.TRANSACTIONASSIGN TA
			WHERE TA.ORDERID = (SELECT ORDERID FROM :TABLE_TA)
				AND TA.LINENUMBER = (SELECT LINENUMBER FROM :TABLE_TA)
				AND TA.SUBLINENUMBER = (SELECT SUBLINENUMBER FROM :TABLE_TA)
				AND TA.EVENTTYPEID = (SELECT EVENTTYPEID FROM :TABLE_TA);
			
			v_setnumber := v_setnumber + 1;
		END IF;
		/*
		--SELECT CAMPO2 FROM :outTab;
		CALL CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'INSERT_INTO_TA' || ' - FILENAME: ' || (SELECT FILENAME FROM :TABLE_TA)			
				|| ' - ORDERID: ' || CASE WHEN (SELECT ORDERID FROM :TABLE_TA) IS NOT NULL THEN (SELECT ORDERID FROM :TABLE_TA) ELSE 'NULL' END	
				|| ' - LINENUMBER: ' || CASE WHEN (SELECT LINENUMBER FROM :TABLE_TA) IS NOT NULL THEN (SELECT LINENUMBER FROM :TABLE_TA) ELSE 'NULL' END		
				|| ' - SUBLINENUMBER: ' || CASE WHEN (SELECT SUBLINENUMBER FROM :TABLE_TA) IS NOT NULL THEN (SELECT SUBLINENUMBER FROM :TABLE_TA) ELSE 'NULL' END	
				|| ' - EVENTTYPEID: ' || CASE WHEN (SELECT EVENTTYPEID FROM :TABLE_TA) IS NOT NULL THEN (SELECT EVENTTYPEID FROM :TABLE_TA) ELSE 'NULL' END		
				|| ' - POSITIONNAME: ' || CASE WHEN (SELECT POSITIONNAME FROM :TABLE_TA) IS NOT NULL THEN (SELECT POSITIONNAME FROM :TABLE_TA) ELSE 'NULL' END	
				|| ' - GA1: ' || CASE WHEN (SELECT GENERICATTRIBUTE1 FROM :TABLE_TA) IS NOT NULL THEN (SELECT GENERICATTRIBUTE1 FROM :TABLE_TA) ELSE 'NULL' END	
				|| ' - GA2: ' || CASE WHEN (SELECT GENERICATTRIBUTE2 FROM :TABLE_TA) IS NOT NULL THEN (SELECT GENERICATTRIBUTE2 FROM :TABLE_TA)ELSE 'NULL' END	
			, v_log_count);
		*/
		INSERT INTO EXT.TRANSACTIONASSIGN
		SELECT  
			FILENAME --'TXTA_PRD_' || TO_CHAR(CURRENT_DATE,'YYYYMMDD') || '_' || FILENAME --"FILE_NAME_OUT"
			, FILENAME -- /*"FILE_NAME_IN"*/ 
			, i_Tenant --"TENANTID"
			, v_indice --"STAGESALESTRANSACTIONSEQ"
			, v_setnumber --"SETNUMBER"
			, FILENAME --"BATCHNAME"	
			, ORDERID  /*"ORDERID"*/ 
			, LINENUMBER  /*"LINENUMBER"*/  
			, SUBLINENUMBER  /*"SUBLINENUMBER"*/                      
			, EVENTTYPEID  /*"EVENTTYPEID"*/                       
			, SALESTRANSACTIONSEQ --"SALESTRANSACTIONSEQ"
			, PAYEEID /*"PAYEEID"*/
			, PAYEETYPE /*"PAYEETYPE"*/                              --required if PayeeID is provided
			, POSITIONNAME --V_POSITIONNAME  /*"POSITIONNAME"*/                           		
			, TITLENAME /*"TITLENAME"*/ 
			, GENERICATTRIBUTE1  /*"GENERICATTRIBUTE1"*/              
			, GENERICATTRIBUTE2  /*"GENERICATTRIBUTE2"*/               
			, GENERICATTRIBUTE3 /*"GENERICATTRIBUTE3"*/                      
			, GENERICATTRIBUTE4 /*"GENERICATTRIBUTE4"*/ 
			, GENERICATTRIBUTE5 /*"GENERICATTRIBUTE5"*/ 
			, GENERICATTRIBUTE6 /*"GENERICATTRIBUTE6"*/ 
			, GENERICATTRIBUTE7 /*"GENERICATTRIBUTE7"*/ 
			, GENERICATTRIBUTE8 /*"GENERICATTRIBUTE8"*/ 
			, GENERICATTRIBUTE9 /*"GENERICATTRIBUTE9"*/ 
			, GENERICATTRIBUTE10 /*"GENERICATTRIBUTE10"*/ 
			, GENERICATTRIBUTE11 /*"GENERICATTRIBUTE11"*/ 
			, GENERICATTRIBUTE12 /*"GENERICATTRIBUTE12"*/ 
			, GENERICATTRIBUTE13 /*"GENERICATTRIBUTE13"*/ 
			, GENERICATTRIBUTE14 /*"GENERICATTRIBUTE14"*/ 
			, GENERICATTRIBUTE15 /*"GENERICATTRIBUTE15"*/ 
			, GENERICATTRIBUTE16 /*"GENERICATTRIBUTE16"*/ 
			, GENERICNUMBER1 /*"GENERICNUMBER1"*/                  
			, UNITTYPEFORGENERICNUMBER1 /*"UNITTYPEFORGENERICNUMBER1"*/ 
			, GENERICNUMBER2 /*"GENERICNUMBER2"*/ 
			, UNITTYPEFORGENERICNUMBER2 /*"UNITTYPEFORGENERICNUMBER2"*/ 
			, GENERICNUMBER3 /*"GENERICNUMBER3"*/ 
			, UNITTYPEFORGENERICNUMBER3 /*"UNITTYPEFORGENERICNUMBER3"*/ 
			, GENERICNUMBER4 /*"GENERICNUMBER4"*/ 
			, UNITTYPEFORGENERICNUMBER4 /*"UNITTYPEFORGENERICNUMBER4"*/ 
			, GENERICNUMBER5 /*"GENERICNUMBER5"*/ 
			, UNITTYPEFORGENERICNUMBER5 /*"UNITTYPEFORGENERICNUMBER5"*/ 
			, GENERICNUMBER6 /*"GENERICNUMBER6"*/
			, UNITTYPEFORGENERICNUMBER6 /*"UNITTYPEFORGENERICNUMBER6"*/
			, GENERICDATE1 /*"GENERICDATE1"*/ 
			, GENERICDATE2 /*"GENERICDATE2"*/ 
			, GENERICDATE3 /*"GENERICDATE3"*/ 
			, GENERICDATE4 /*"GENERICDATE4"*/ 
			, GENERICDATE5 /*"GENERICDATE5"*/ 
			, GENERICDATE6 /*"GENERICDATE6"*/ 
			, GENERICBOOLEAN1 /*"GENERICBOOLEAN1"*/ 
			, GENERICBOOLEAN2 /*"GENERICBOOLEAN2"*/ 
			, GENERICBOOLEAN3 /*"GENERICBOOLEAN3"*/ 
			, GENERICBOOLEAN4 /*"GENERICBOOLEAN4"*/ 
			, GENERICBOOLEAN5 /*"GENERICBOOLEAN5"*/ 
			, GENERICBOOLEAN6 /*"GENERICBOOLEAN6"*/
        FROM :TABLE_TA;
		
		num_rows := ::rowcount;
		COMMIT;
		
		--Se comenta para no escribir una fila por cada vuelta del cursor.
		--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG(proc_name, 'Fin insercion EXT.TRANSACTIONASSIGN: '|| num_rows || ' filas para el fichero '|| (SELECT FILENAME FROM :TABLE_TA), v_log_count, i_idproceso);

	END;
  PUBLIC PROCEDURE getNextStageSTSeq (OUT o_stSeq BIGINT, INOUT io_count INT )
  LANGUAGE SQLSCRIPT AS
	BEGIN
		
		DECLARE max_tcmp BIGINT;
		DECLARE max_ext BIGINT;
		
		SELECT IFNULL(MAX(STAGESALESTRANSACTIONSEQ), 0) + io_count 
		INTO max_tcmp
		FROM TCMP.CS_STAGESALESTRANSACTION;
		
		SELECT IFNULL(MAX(STAGESALESTRANSACTIONSEQ), 0) + io_count 
		INTO max_ext
		FROM EXT.SALESTRANSACTION;
		
		IF max_tcmp >= max_ext THEN
			o_stSeq := max_tcmp;
		ELSE
			o_stSeq := max_ext;
		END IF;
		
		io_count := io_count + 1;
		
	END;
  PUBLIC PROCEDURE getNextStageParticipantSeq (OUT o_ParticipantSeq BIGINT, INOUT io_count INT )
  LANGUAGE SQLSCRIPT AS
	BEGIN
		
		SELECT IFNULL(MAX(STAGEPARTICIPANTSEQ), 0) + io_count 
		INTO o_ParticipantSeq
		FROM TCMP.CS_STAGEPARTICIPANT;
		
		io_count:= io_count + 1;
		
	END;
  PUBLIC PROCEDURE getNextStagePositionRelationSeq (OUT o_PositionRelationSeq BIGINT, INOUT io_count INT )
  LANGUAGE SQLSCRIPT AS
	BEGIN
		
		SELECT IFNULL(MAX(STAGEPOSITIONRELATIONSEQ), 0) + io_count 
		INTO o_PositionRelationSeq
		FROM TCMP.CS_STAGEPOSITIONRELATION;
		
		io_count:= io_count + 1;
		
	END;
  PUBLIC PROCEDURE getNextStagePositionSeq (OUT o_PositionSeq BIGINT, INOUT io_count INT )
  LANGUAGE SQLSCRIPT AS
	BEGIN
		
		SELECT IFNULL(MAX(STAGEPOSITIONSEQ), 0) + io_count 
		INTO o_PositionSeq
		FROM TCMP.CS_STAGEPOSITION;
		
		io_count:= io_count + 1;
		
	END;
  PUBLIC PROCEDURE SP_CONTROL_ODL (IN par_FECHA varchar(120), IN par_RAIZ varchar(120), IN par_ESTADO varchar(120)
		, INOUT v_log_count INTEGER, IN i_idproceso INTEGER , IN proc_name VARCHAR2(50))
  LANGUAGE SQLSCRIPT AS
	BEGIN
		
		DECLARE proc_name_secun VARCHAR2(50) := 'EXT.SP_CONTROL_ODL';
		DECLARE v_control INT := 0;
		DECLARE v_cargado INT := 0;
		DECLARE v_num_fich INT := 0;
		DECLARE v_estado INT := 0;
		
		DECLARE v_control_odl_total_fich INT := EXT.LIB_CONSTANTES_SL:CONTROL_ODL_TOTAL_FICH;
		--DECLARE v_control_odl_tipo_load VARCHAR2(7) := EXT.LIB_CONSTANTES_SL:CONTROL_ODL_TIPO_LOAD;
		--DECLARE v_control_odl_tipo_calc VARCHAR2(7) := EXT.LIB_CONSTANTES_SL:CONTROL_ODL_TIPO_CALC;
		--DECLARE v_control_odl_tipo_gen_trx VARCHAR2(7) := EXT.LIB_CONSTANTES_SL:CONTROL_ODL_TIPO_GEN_TRX;
		DECLARE v_control_odl_est_load INT := EXT.LIB_CONSTANTES_SL:CONTROL_ODL_EST_LOAD;
		DECLARE v_control_odl_est_load_all INT := EXT.LIB_CONSTANTES_SL:CONTROL_ODL_EST_LOAD_ALL;
		DECLARE v_control_odl_est_load_error INT := EXT.LIB_CONSTANTES_SL:CONTROL_ODL_EST_LOAD_ERROR;
		DECLARE v_control_odl_est_calc_run INT := EXT.LIB_CONSTANTES_SL:CONTROL_ODL_EST_CALC_RUN;
		DECLARE v_control_odl_est_calc_ok INT := EXT.LIB_CONSTANTES_SL:CONTROL_ODL_EST_CALC_OK;
		DECLARE v_control_odl_est_calc_error INT := EXT.LIB_CONSTANTES_SL:CONTROL_ODL_EST_CALC_ERROR;
		DECLARE v_control_odl_est_gen_trx_run INT := EXT.LIB_CONSTANTES_SL:CONTROL_ODL_EST_GEN_TRX_RUN;
		DECLARE v_control_odl_est_gen_trx_ok INT := EXT.LIB_CONSTANTES_SL:CONTROL_ODL_EST_GEN_TRX_OK;
		DECLARE v_control_odl_est_gen_trx_error INT := EXT.LIB_CONSTANTES_SL:CONTROL_ODL_EST_GEN_TRX_ERROR;
		
		DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
		BEGIN
			CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name , proc_name_secun || ' - ' || 'SQL_ERROR_MESSAGE: ' || IFNULL(::SQL_ERROR_MESSAGE,'') || '. SQL_ERROR_CODE: ' || ::SQL_ERROR_CODE, v_log_count, i_idproceso, 'error');
		END;
		
		--Comprobamos si ya existe la cadena en la tabla EXT.CONTROL_ODL.
		SELECT COUNT(*) INTO v_control
		FROM EXT.CONTROL_ODL
		WHERE CADENA = 'ODL_' || par_FECHA;
		
		IF v_control > 0 THEN
			
			--Comprobamos cual es el estado actual de la cadena.
			SELECT ESTADO INTO v_estado
			FROM EXT.CONTROL_ODL
			WHERE CADENA = 'ODL_' || par_FECHA;
			
			--Si el que existe es mayor al que se quiere actualizar, no hacemos nada y escribimos en el log como si hubiese error.
			IF v_estado > par_ESTADO THEN
				
				CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, proc_name_secun || ' - ERROR Actualizando en EXT.CONTROL_ODL la cadena ODL_' || par_FECHA 
																					|| ' con estado (' || v_estado || ') a estado ' || par_ESTADO, v_log_count, i_idproceso, 'warning');
				
			ELSE
				
				IF v_estado = v_control_odl_est_load THEN
					
					--Si el estado es de carga comprobamos si ya se ha cargado el mismo fichero anteriormente para esa CADENA.
					SELECT COUNT(*) INTO v_cargado
					FROM EXT.CONTROL_ODL
					WHERE CADENA = 'ODL_' || par_FECHA
					AND FICH_PROC like '%ODL' || par_RAIZ || '%';
					
					IF v_cargado > 0 THEN
						
						--Si ya se ha cargado ponemos ESTADO de error en la carga.
						UPDATE EXT.CONTROL_ODL
						SET ESTADO = v_control_odl_est_load_error,
							FEC_MODIF = CURRENT_TIMESTAMP
						WHERE CADENA = 'ODL_'|| par_FECHA;
						
						COMMIT;
						
					ELSE 
						
						--Si no se ha cargado anteriormente, actualizamos en la tabla los campos necesarios.
						UPDATE EXT.CONTROL_ODL
						SET NUM_FICH = NUM_FICH + 1,
							FEC_MODIF = TO_VARCHAR(CURRENT_TIMESTAMP),
							FICH_PROC = FICH_PROC  || '_' || 'ODL' || par_RAIZ
						WHERE CADENA = 'ODL_' || par_FECHA;
						
						COMMIT;
						
						--Comprobamos si el numero de ficheros ya cargados se corresponde con el total (5) para actualizar el ESTADO y que comience el CALCULO.
						SELECT NUM_FICH INTO v_num_fich
						FROM EXT.CONTROL_ODL
						WHERE CADENA = 'ODL_' || par_FECHA;	
						
						IF v_num_fich = v_control_odl_total_fich THEN
							
							UPDATE EXT.CONTROL_ODL
							SET ESTADO = v_control_odl_est_load_all
							WHERE CADENA = 'ODL_' || par_FECHA;	
							
							COMMIT;
							
						END IF;
						
					END IF;
					
				ELSE
					
					--Si el estado no es el inicial ponemos el que nos llega por parametro.
					UPDATE EXT.CONTROL_ODL
					SET ESTADO = par_ESTADO,
						FEC_MODIF = CURRENT_TIMESTAMP
					WHERE CADENA = 'ODL_'|| par_FECHA;
					
					COMMIT;
					
				END IF;
				
			END IF;
			
		ELSE
			
			--Insertamos si el estado que se quiere insertar es uno de los iniciales.
			IF par_ESTADO = v_control_odl_est_load OR par_ESTADO = v_control_odl_est_load_error THEN
				
				INSERT INTO EXT.CONTROL_ODL
				VALUES (
					'ODL_' || par_FECHA						--CADENA
					, par_ESTADO							--ESTADO
					, 1										--NUM_FICH
					, CURRENT_TIMESTAMP						--FEC_MODIF
					, 'ODL' || par_RAIZ 					--FICH_PROC
				);
				
				COMMIT;
				
			--Sino no insertamos nada y escribimos en el log como si hubiese error.
			ELSE
				
				CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, proc_name_secun || ' - ERROR Insertando en EXT.CONTROL_ODL con estado ' || par_ESTADO || ' para la cadena ODL_' || par_FECHA, v_log_count, i_idproceso, 'warning');
				
			END IF;
			
		END IF;
		
		CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, proc_name_secun || ' - Procedure ended for ' || par_RAIZ || ' - ' || par_FECHA || ' (' || par_ESTADO || ')', v_log_count, i_idproceso, 'info');
		
	END;
  PUBLIC FUNCTION FT_GET_ESTADO_CARGA (CLASSIFIERNAME VARCHAR(20)) 
  RETURNS CARGA NUMBER AS
	BEGIN
		DECLARE v_eot DATE := EXT.LIB_CONSTANTES_SL:v_eot;
		
		CARGA := 0;
		
		SELECT cgc.GENERICBOOLEAN1 into CARGA
		FROM cs_classifier clas
		INNER JOIN cs_genericclassifier cgc ON clas.classifierseq = cgc.classifierseq
			AND cgc.REMOVEDATE = v_eot
			AND cgc.EFFECTIVEENDDATE > CURRENT_DATE
			AND cgc.EFFECTIVESTARTDATE <= CURRENT_DATE
		WHERE clas.REMOVEDATE = v_eot
			AND clas.EFFECTIVEENDDATE > CURRENT_DATE
			AND clas.EFFECTIVESTARTDATE <= CURRENT_DATE
			AND clas.name = CLASSIFIERNAME;

	END;
  PUBLIC FUNCTION VALIDAR_NIF_NIE(IN IN_NIF_NIE VARCHAR(20)) RETURNS OUT_valida BOOLEAN
	AS
	BEGIN
		
		IF IN_NIF_NIE LIKE_REGEXPR '^[KLMXYZ0-9][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$' THEN
			DECLARE letra CHAR(1);
			DECLARE numeros INT;
			
			IF		LEFT(IN_NIF_NIE,1) IN ('K','L','M','X') THEN	numeros = TO_INTEGER('0' || SUBSTRING(IN_NIF_NIE, 2, 7));
				ELSEIF	LEFT(IN_NIF_NIE,1) = 'Y' THEN					numeros = TO_INTEGER('1' || SUBSTRING(IN_NIF_NIE, 2, 7));
				ELSEIF	LEFT(IN_NIF_NIE,1) = 'Z' THEN					numeros = TO_INTEGER('2' || SUBSTRING(IN_NIF_NIE, 2, 7));
			ELSE													numeros = TO_INTEGER(SUBSTRING(IN_NIF_NIE, 1, 8)); END IF;
			letra = SUBSTRING(IN_NIF_NIE, 9, 1);
			
			SELECT CASE
				WHEN MOD(numeros,23) = 0	AND letra = 'T' THEN	TRUE
				WHEN MOD(numeros,23) = 1	AND letra = 'R' THEN	TRUE
				WHEN MOD(numeros,23) = 2	AND letra = 'W' THEN	TRUE
				WHEN MOD(numeros,23) = 3	AND letra = 'A' THEN	TRUE
				WHEN MOD(numeros,23) = 4	AND letra = 'G' THEN	TRUE
				WHEN MOD(numeros,23) = 5	AND letra = 'M' THEN	TRUE
				WHEN MOD(numeros,23) = 6	AND letra = 'Y' THEN	TRUE
				WHEN MOD(numeros,23) = 7	AND letra = 'F' THEN	TRUE
				WHEN MOD(numeros,23) = 8	AND letra = 'P' THEN	TRUE
				WHEN MOD(numeros,23) = 9	AND letra = 'D' THEN	TRUE
				WHEN MOD(numeros,23) = 10	AND letra = 'X' THEN	TRUE
				WHEN MOD(numeros,23) = 11	AND letra = 'B' THEN	TRUE
				WHEN MOD(numeros,23) = 12	AND letra = 'N' THEN	TRUE
				WHEN MOD(numeros,23) = 13	AND letra = 'J' THEN	TRUE
				WHEN MOD(numeros,23) = 14	AND letra = 'Z' THEN	TRUE
				WHEN MOD(numeros,23) = 15	AND letra = 'S' THEN	TRUE
				WHEN MOD(numeros,23) = 16	AND letra = 'Q' THEN	TRUE
				WHEN MOD(numeros,23) = 17	AND letra = 'V' THEN	TRUE
				WHEN MOD(numeros,23) = 18	AND letra = 'H' THEN	TRUE
				WHEN MOD(numeros,23) = 19	AND letra = 'L' THEN	TRUE
				WHEN MOD(numeros,23) = 20	AND letra = 'C' THEN	TRUE
				WHEN MOD(numeros,23) = 21	AND letra = 'K' THEN	TRUE
				WHEN MOD(numeros,23) = 22	AND letra = 'E' THEN	TRUE
					ELSE FALSE
				END AS B INTO OUT_valida from dummy;
				ELSE
				OUT_valida = FALSE;
		END IF;
	END;
  PUBLIC FUNCTION GET_LAST_COMPENSATE_AND_PAY_TIME_BEFORE_LAST_POST_AFTER_FINALIZE(IN in_periodseq BIGINT) RETURNS out_date TIMESTAMP
	AS
	BEGIN
		
		SELECT MAX(PL.STARTTIME) into out_date
        FROM TCMP.CS_PLRUN PL
        WHERE PL.RUNPARAMETERS LIKE '%[Sequence]%Pay%'
		AND PL.COMMAND = 'PipelineRun'
		AND PL.STATUS = 'Successful'
		AND PL.PERIODSEQ = in_periodseq
		AND PL.STARTTIME < (
			--Usamos la fecha del ultimo Post ejecutado anterior al Finalize del periodo, si se ha realizado sino cogemos la fecha del ultimo Post ejecutado anterior a la fecha actual. 
			SELECT MAX(X.STARTTIME) FROM TCMP.CS_PLRUN X
			WHERE 1=1
			AND X.RUNPARAMETERS LIKE '%[Sequence]Post%'
			AND X.COMMAND = 'PipelineRun'
			AND X.STATUS = 'Successful'
			AND X.PERIODSEQ = in_periodseq
			AND X.STARTTIME < (
				--Usamos la fecha del Finalize del periodo, si aun no se ha realizado (lo normal cuando se lance el REPEXT) se coge la fecha actual.
				--Nos vale por si hay que repetir un REPEXT pasado el Posteo de los balances, ya que estos no se deben de tener en cuenta.
				SELECT IFNULL(MIN(Y.STARTTIME),CURRENT_TIMESTAMP) FROM TCMP.CS_PLRUN Y
				WHERE Y.RUNPARAMETERS LIKE '%[Sequence]Finalize%'
				AND Y.COMMAND = 'PipelineRun'
				AND Y.STATUS = 'Successful'
				AND Y.PERIODSEQ = in_periodseq
			)
		)
		;
	END;
  PUBLIC FUNCTION VALIDAR_CIF(IN IN_CIF VARCHAR(20)) RETURNS OUT_valida BOOLEAN
	AS
	BEGIN
		
		OUT_valida = FALSE;
		
		IF IN_CIF LIKE_REGEXPR '^[ABCDEFGHJNPQRSUVW][0-9]{7}[ABCDEFGHIJ0-9]$' THEN
			DECLARE numeros VARCHAR(7);
			DECLARE final CHAR(1);
			DECLARE control_final CHAR(1);
			DECLARE suma_A INT;
			DECLARE suma_B INT;
			DECLARE suma_C INT;
			DECLARE last_digit SMALLINT;
			
			numeros = SUBSTRING(IN_CIF,2,7);
			final = SUBSTRING(IN_CIF,9,1);
			
			--Pares
			suma_A = TO_INTEGER(SUBSTRING(numeros,6,1)) + TO_INTEGER(SUBSTRING(numeros,4,1)) + TO_INTEGER(SUBSTRING(numeros,2,1));
			--Impares
			suma_B = LEFT(TO_VARCHAR(TO_INTEGER(SUBSTRING(numeros,7,1))*2,'00'),1) + RIGHT(TO_VARCHAR(TO_INTEGER(SUBSTRING(numeros,7,1))*2,'00'),1)
	    	+ LEFT(TO_VARCHAR(TO_INTEGER(SUBSTRING(numeros,5,1))*2,'00'),1) + RIGHT(TO_VARCHAR(TO_INTEGER(SUBSTRING(numeros,5,1))*2,'00'),1)
	    	+ LEFT(TO_VARCHAR(TO_INTEGER(SUBSTRING(numeros,3,1))*2,'00'),1) + RIGHT(TO_VARCHAR(TO_INTEGER(SUBSTRING(numeros,3,1))*2,'00'),1)
	    	+ LEFT(TO_VARCHAR(TO_INTEGER(SUBSTRING(numeros,1,1))*2,'00'),1) + RIGHT(TO_VARCHAR(TO_INTEGER(SUBSTRING(numeros,1,1))*2,'00'),1);
			suma_C = suma_A + suma_B;
			last_digit = MOD(10-MOD(suma_C,10),10);
			
			IF (last_digit = 0) THEN
				control_final = 'J';
				ELSE control_final = CHAR(64 + last_digit);
			END IF;
			
			IF LEFT(IN_CIF,1) IN ('N','P','Q','R','S','W') OR SUBSTRING(IN_CIF,2,2) = '00' AND final LIKE_REGEXPR '[A-Z]' AND final LIKE control_final THEN OUT_valida = TRUE; --Letter
				ELSEIF LEFT(IN_CIF,1) IN ('A','B','E','H') AND final LIKE_REGEXPR '[0-9]' AND final LIKE last_digit THEN OUT_valida = TRUE; --Number
				ELSEIF LEFT(IN_CIF,1) NOT IN ('A','B','E','H','N','P','Q','R','S','W') AND (final LIKE last_digit OR final LIKE control_final) THEN OUT_valida = TRUE; --Both
			END IF;
		END IF;
	END;
  PUBLIC FUNCTION VALIDAR_IBAN(IN IN_IBAN VARCHAR(100)) RETURNS OUT_valida BOOLEAN
	AS
	BEGIN
		
		DECLARE iban_prefix VARCHAR(4);
		DECLARE iban_country_code VARCHAR(2);
		DECLARE iban_check_digits VARCHAR(2);
		DECLARE iban_account_number VARCHAR(30);
		DECLARE iban_numeric VARCHAR(30);
		DECLARE iban_remainder INT;
		DECLARE iban_check_digit INT;
		DECLARE iban VARCHAR(34);
		
		OUT_valida = TRUE;
		-- Eliminar espacios en blanco y guiones del IBAN
		iban = REPLACE(REPLACE(IN_IBAN, ' ', ''), '-', '');
		
		-- Obtener partes del IBAN
		iban_country_code = SUBSTRING(iban, 1, 2);
		iban_check_digits = SUBSTRING(iban, 3, 2);
		iban_account_number = SUBSTRING(iban, 5);
		
		-- Validar la longitud del IBAN y el formato
		IF LENGTH(iban) != 24 OR iban_country_code NOT LIKE_REGEXPR '^[A-Z]{2}$' OR iban_account_number NOT LIKE_REGEXPR '^[0-9]{1,30}$' OR IN_IBAN IS NULL THEN
			OUT_valida = FALSE;
		END IF;
		
		-- Reorganizar el IBAN para calcular los dígitos de control
		iban_numeric = iban_account_number || iban_country_code || '00';
		
		-- Convertir letras a números where A = 10, B = 11, ..., Z = 35
		iban_numeric = 
		REPLACE(
			REPLACE(
				REPLACE(
					REPLACE(
						REPLACE(
							REPLACE(
								REPLACE(
									REPLACE(
										REPLACE(
											REPLACE(
												REPLACE(
													REPLACE(
														REPLACE(
															REPLACE(
																REPLACE(
																	REPLACE(
																		REPLACE(
																			REPLACE(
																				REPLACE(
																					REPLACE(
																						REPLACE(
																							REPLACE(
																								REPLACE(
																									REPLACE(
																										REPLACE(
																											REPLACE(
																												iban_numeric,
																												'A', '10'
																											),
																											'B', '11'
																										),
																										'C', '12'
																									),
																									'D', '13'
																								),
																								'E', '14'
																							),
																							'F', '15'
																						),
																						'G', '16'
																					),
																					'H', '17'
																				),
																				'I', '18'
																			),
																			'J','19'
																		),
																		'K', '20'
																	),
																	'L', '21'
																),
																'M', '22'
															),
															'N', '23'
														),
														'O', '24'
													),
													'P', '25'
												),
												'Q', '26'
											),
											'R', '27'
										),
										'S', '28'
									),
								'T','29'),
								'U', '30'
							),
							'V', '31'
						),
						'W', '32'
					),
					'X', '33'
				),
				'Y', '34'
			),
			'Z', '35'
		);
		
		-- Calcular el dígito de control
		iban_remainder = MOD(SUBSTRING(iban_numeric,1,9), 97);
		iban_remainder = MOD(iban_remainder || SUBSTRING(iban_numeric,10,7),97);
		iban_remainder = MOD(iban_remainder || SUBSTRING(iban_numeric,17,7),97);
		iban_remainder = MOD(iban_remainder || SUBSTRING(iban_numeric,24),97);
		
		iban_check_digit = 98 - iban_remainder;
		
		-- Verificar si el dígito de control es válido
		IF iban_check_digit NOT LIKE iban_check_digits THEN
			OUT_valida = FALSE;
		END IF;
	END;
  PUBLIC PROCEDURE SP_GET_BUSINESSUNIT (
	IN PAR_CODIGOSIIS VARCHAR(500), IN FECHA DATE, OUT PAR_BUSINESSUNITMAP VARCHAR(500), OUT PAR_BU VARCHAR(500), OUT POSNAME VARCHAR(500), OUT PAR_TITLENAME VARCHAR(1000), 
	INOUT v_log_count INT, IN proc_name VARCHAR(255), INOUT v_estadoPre INT, INOUT v_estadoStage INT, IN i_idproceso BIGINT)
	LANGUAGE SQLScript AS
	BEGIN
		
		DECLARE v_eot DATE := EXT.LIB_CONSTANTES_SL:v_eot;
		DECLARE v_tenantId VARCHAR(4) := EXT.LIB_CONSTANTES_SL:getTenantID();
		DECLARE v_preError INT := EXT.LIB_CONSTANTES_SL:PRESTAGE_STATUS_ERROR;
		DECLARE v_stError INT := EXT.LIB_CONSTANTES_SL:STAGE_STATUS_ERROR;
		
		DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
		BEGIN
			CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG(proc_name , 'SP_GET_BUSINESSUNIT - Error en:   PAR_CODIGOSIIS: (' || IFNULL(PAR_CODIGOSIIS,'PAR_CODIGOSIIS nulo')  
																	|| ') SQL_ERROR_MESSAGE: ' || IFNULL(::SQL_ERROR_MESSAGE,'')
																	|| '. SQL_ERROR_CODE: ' || ::SQL_ERROR_CODE, v_log_count, i_idproceso,'error');
			v_estadoPre := v_preError;
			v_estadoStage := v_stError;
		END;
		
		SELECT  REO.BUSINESSUNITMAP, (SELECT NAME FROM  tcmp.CS_BUSINESSUNIT WHERE MASK =REO.BUSINESSUNITMAP), POS.NAME, TIT.NAME AS PAR_TITLENAME
			INTO PAR_BUSINESSUNITMAP, PAR_BU, POSNAME, PAR_TITLENAME
		FROM TCMP.CS_POSITION POS
		INNER JOIN TCMP.CS_RULEELEMENTOWNER REO ON POS.RULEELEMENTOWNERSEQ = REO.RULEELEMENTOWNERSEQ
			AND REO.TENANTID = v_tenantId AND REO.REMOVEDATE = v_eot AND REO.MODELSEQ = 0
			AND REO.EFFECTIVESTARTDATE <= FECHA AND REO.EFFECTIVEENDDATE > FECHA
		INNER JOIN TCMP.CS_TITLE TIT ON POS.TITLESEQ = TIT.RULEELEMENTOWNERSEQ
			AND TIT.TENANTID = v_tenantId AND TIT.REMOVEDATE = v_eot
			AND TIT.EFFECTIVESTARTDATE <= FECHA AND TIT.EFFECTIVEENDDATE > FECHA
			--Filtramos las Position Secundarias de las SSMM, sino nos da error.
			AND TIT.NAME NOT LIKE 'TTLS%'
		WHERE POS.GENERICATTRIBUTE1 = PAR_CODIGOSIIS
			AND POS.TENANTID = v_tenantId AND POS.PROCESSINGUNITSEQ = 38280596832649217 AND POS.REMOVEDATE = v_eot
			AND POS.EFFECTIVESTARTDATE <= FECHA AND POS.EFFECTIVEENDDATE > FECHA
		;
		
	END;
  PUBLIC PROCEDURE SP_GET_CORREDOR (
	IN PositionName_PV VARCHAR(500), IN FECHA DATE, OUT PositionName_CORREDOR VARCHAR(500), 
	INOUT v_log_count INT, IN proc_name VARCHAR(255), INOUT v_estadoPre INT, INOUT v_estadoStage INT, IN i_idproceso BIGINT)
	LANGUAGE SQLScript AS
	BEGIN
	
			DECLARE v_eot DATE := EXT.LIB_CONSTANTES_SL:v_eot;
			DECLARE v_tenantId VARCHAR(4) := EXT.LIB_CONSTANTES_SL:getTenantID();
			DECLARE v_preError INT := EXT.LIB_CONSTANTES_SL:PRESTAGE_STATUS_ERROR;
			DECLARE v_stError INT := EXT.LIB_CONSTANTES_SL:STAGE_STATUS_ERROR;
			
			DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
			BEGIN
				CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG(proc_name , 'SP_GET_CORREDOR - Error en:   PositionName_PV: (' || IFNULL(PositionName_PV,'PositionName_PV nulo')  
																		|| ') SQL_ERROR_MESSAGE: ' || IFNULL(::SQL_ERROR_MESSAGE,'')
																		|| '. SQL_ERROR_CODE: ' || ::SQL_ERROR_CODE, v_log_count, i_idproceso,'error');
				v_estadoPre := v_preError;
				v_estadoStage := v_stError;
			END;
			
	
		
			SELECT POS.NAME
			INTO PositionName_CORREDOR
			FROM TCMP.CS_POSITIONRELATION PR
			INNER JOIN TCMP.CS_POSITIONRELATIONTYPE PRT ON PR.POSITIONRELATIONTYPESEQ = PRT.DATATYPESEQ
				AND PRT.TENANTID = v_tenantId AND PRT.REMOVEDATE = v_eot
				AND PRT.NAME = 'Jerarquia Territorial'
			INNER JOIN TCMP.CS_POSITION POS ON PR.CHILDPOSITIONSEQ = POS.RULEELEMENTOWNERSEQ
				AND POS.TENANTID = v_tenantId AND POS.PROCESSINGUNITSEQ = 38280596832649217 AND POS.REMOVEDATE = v_eot
				AND POS.EFFECTIVESTARTDATE <= FECHA AND POS.EFFECTIVEENDDATE > FECHA
			INNER JOIN TCMP.CS_POSITION POSP ON PR.PARENTPOSITIONSEQ = POSP.RULEELEMENTOWNERSEQ
				AND POSP.TENANTID = v_tenantId AND POSP.PROCESSINGUNITSEQ = 38280596832649217 AND POSP.REMOVEDATE = v_eot
				AND POSP.EFFECTIVESTARTDATE <= FECHA AND POSP.EFFECTIVEENDDATE > FECHA
			WHERE PR.TENANTID = v_tenantId AND PR.REMOVEDATE = v_eot
				AND PR.EFFECTIVESTARTDATE <= FECHA AND PR.EFFECTIVEENDDATE > FECHA
				AND POSP.NAME =PositionName_PV;
		
	
	
	END;
  PUBLIC PROCEDURE SP_GET_MEDIADOR (
	IN PAR_MEDIADOR VARCHAR(500), IN PAR_AGENCIA VARCHAR(500), IN FECHA DATE, IN PAR_BUSINESSUNITMAP VARCHAR(500), IN PAR_BU VARCHAR(500), 
	OUT PAR_MANAGER1 VARCHAR(500), OUT PAR_MANAGER2 VARCHAR(500), OUT PAR_MANAGER3 VARCHAR(500), OUT TIT_MAN3 VARCHAR(500), OUT TIT_MAN2 VARCHAR(500), OUT TIT_MAN1 VARCHAR(500),
	INOUT v_log_count INT, IN proc_name VARCHAR(255), INOUT v_estadoPre INT, INOUT v_estadoStage INT, IN i_idproceso BIGINT)
	LANGUAGE SQLScript AS
	BEGIN
	
			DECLARE v_eot DATE := EXT.LIB_CONSTANTES_SL:v_eot;
			DECLARE v_tenantId VARCHAR(4) := EXT.LIB_CONSTANTES_SL:getTenantID();
			DECLARE v_preError INT := EXT.LIB_CONSTANTES_SL:PRESTAGE_STATUS_ERROR;
			DECLARE v_stError INT := EXT.LIB_CONSTANTES_SL:STAGE_STATUS_ERROR;
			DECLARE v_existeParticipant INT := 0;
			
			DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
			BEGIN
				CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG(proc_name , 'SP_GET_MEDIADOR - Error en:   PAR_CODIGOSIIS: (' || IFNULL(PAR_MEDIADOR,'PAR_CODIGOSIIS nulo')  
																		|| ') SQL_ERROR_MESSAGE: ' || IFNULL(::SQL_ERROR_MESSAGE,'')
																		|| '. SQL_ERROR_CODE: ' || ::SQL_ERROR_CODE, v_log_count, i_idproceso,'error');
				v_estadoPre := v_preError;
				v_estadoStage := v_stError;
			END;
			
			PAR_MANAGER1 := 'NULL';
			PAR_MANAGER2 := 'NULL';
			PAR_MANAGER3 := 'NULL';
			TIT_MAN3 := 'NULL';
			TIT_MAN2 := 'NULL';
			TIT_MAN1 := 'NULL';
			
			IF PAR_BUSINESSUNITMAP = 1 THEN --SSMM
			--MAN1 es inspector o monitor, no podemos encontrarlo en la jerarquía porque no se ha encontrado al colaborador
			--MAN2 es agencia, tiene que pasarse como parámetro
			--MAN3 es SSMM, tiene que pasarse como parámetro
			IF((PAR_MEDIADOR <> 'NULL')AND(PAR_MEDIADOR IS NOT NULL))THEN
				TIT_MAN3 := 'TTL_SM_SOCIEDAD_MEDIACION';
			
				SELECT POS.NAME INTO PAR_MANAGER3 FROM TCMP.CS_POSITION POS
				INNER JOIN TCMP.CS_TITLE TTL ON TTL.RULEELEMENTOWNERSEQ = POS.TITLESEQ
					AND TTL.EFFECTIVESTARTDATE <= FECHA
					AND TTL.EFFECTIVEENDDATE > FECHA
					AND TTL.REMOVEDATE = v_eot
					AND TTL.NAME = TIT_MAN3
				WHERE POS.EFFECTIVESTARTDATE <= FECHA
					AND POS.EFFECTIVEENDDATE > FECHA
					AND POS.REMOVEDATE = v_eot
					AND POS.GENERICATTRIBUTE1 = PAR_MEDIADOR;
			ELSE 
				CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'Error en búsqueda de SSMM con valor: '||IFNULL(PAR_MEDIADOR,'PAR_MEDIADOR no encontrado'), v_log_count, i_idproceso, 'warning');
			END IF;
			
			IF((PAR_AGENCIA <> 'NULL')AND(PAR_AGENCIA IS NOT NULL))THEN
				TIT_MAN2 := 'TTL_AS_AGENCIA_SOCIEDAD_MEDIACION';
			
				SELECT POS.NAME INTO PAR_MANAGER2 FROM TCMP.CS_POSITION POS
				INNER JOIN TCMP.CS_TITLE TTL ON TTL.RULEELEMENTOWNERSEQ = POS.TITLESEQ
					AND TTL.EFFECTIVESTARTDATE <= FECHA
					AND TTL.EFFECTIVEENDDATE > FECHA
					AND TTL.REMOVEDATE = v_eot
					AND TTL.NAME = TIT_MAN2
				WHERE POS.EFFECTIVESTARTDATE <= FECHA
					AND POS.EFFECTIVEENDDATE > FECHA
					AND POS.REMOVEDATE = v_eot
					AND POS.GENERICATTRIBUTE1 = PAR_AGENCIA;
			ELSE 
				CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'Error en búsqueda de SSMM con valor: '||IFNULL(PAR_AGENCIA,'PAR_AGENCIA no encontrado'), v_log_count, i_idproceso, 'warning');
			END IF;
			
			--ELSEIF V_BUMAP = 2 THEN --ACCEPTA --NO HACE FALTA

			ELSEIF PAR_BUSINESSUNITMAP = 2 THEN --CAE
			

			ELSEIF PAR_BUSINESSUNITMAP = 8 THEN --CORREDORES

			ELSEIF PAR_BUSINESSUNITMAP = 16 THEN --ALIANZAS

			--ELSEIF V_BUMAP = 32 THEN --DIGITAL PUEDE NO HACER FALTA

			END IF;
	END;
  PUBLIC FUNCTION FT_SPLIT_ARRAY (cadena VARCHAR(5000), delimitador VARCHAR(255), num INTEGER) 
  RETURNS v_ret VARCHAR(255) --LANGUAGE SQLSCRIPT SQL SECURITY DEFINER
  AS
	BEGIN
		DECLARE v_start integer;
		DECLARE v_end integer;
		
		IF :num = 1 THEN
			v_start := 1;
		ELSE
			v_start := INSTR(:cadena, :delimitador, 1, :num - 1);
			
			IF :v_start = 0 THEN
				RETURN;
			END if;
			
			v_start := :v_start + 1;
		END IF;
		
		v_end := INSTR(:cadena, :delimitador, 1, :num);
		
		IF :v_end = 0 THEN
			v_end := LENGTH(:cadena);
		ELSE
			v_end := :v_end - 1;
		END IF;
		
		v_ret := SUBSTR(:cadena, :v_start, :v_end - :v_start + 1);
		
	END;
  PUBLIC FUNCTION FT_SPLIT_ARRAY_CLOB (cadena CLOB, delimitador VARCHAR(255), num INTEGER) 
  RETURNS v_ret VARCHAR(255) --LANGUAGE SQLSCRIPT SQL SECURITY DEFINER
  AS
	BEGIN
		DECLARE v_start integer;
		DECLARE v_end integer;
		
		IF :num = 1 THEN
			v_start := 1;
		ELSE
			v_start := INSTR(:cadena, :delimitador, 1, :num - 1);
			
			IF :v_start = 0 THEN
				RETURN;
			END if;
			
			v_start := :v_start + 1;
		END IF;
		
		v_end := INSTR(:cadena, :delimitador, 1, :num);
		
		IF :v_end = 0 THEN
			v_end := LENGTH(:cadena);
		ELSE
			v_end := :v_end - 1;
		END IF;
		
		v_ret := SUBSTR(:cadena, :v_start, :v_end - :v_start + 1);
		
	END;
  PUBLIC PROCEDURE SP_HIST_RECIBO (
	IN v_ID_POLIZA_ODL VARCHAR(500), IN v_ID_RECIBO_ODL VARCHAR(500), IN v_VERS_RECIBO_ODL INT,
	INOUT v_log_count INT, IN v_idproceso BIGINT, IN proc_name VARCHAR(255))
	LANGUAGE SQLScript AS
	BEGIN
		
		DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
		BEGIN
			CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG(proc_name , 'SP_HIST_RECIBO - Error en: v_ID_POLIZA_ODL: (' || IFNULL(v_ID_POLIZA_ODL,'v_ID_POLIZA_ODL nulo')  
																	|| 'v_ID_RECIBO_ODL: (' || IFNULL(v_ID_RECIBO_ODL,'v_ID_RECIBO_ODL nulo') 
																	|| 'v_VERS_RECIBO_ODL: (' || IFNULL(v_VERS_RECIBO_ODL,'v_VERS_RECIBO_ODL nulo') 
																	|| ') SQL_ERROR_MESSAGE: ' || IFNULL(::SQL_ERROR_MESSAGE,'')
																	|| '. SQL_ERROR_CODE: ' || ::SQL_ERROR_CODE, v_log_count, v_idproceso,'error');
		END;
		
		--Que inserte la poliza, recibo y version en la tabla de historico de recibos RECIBOS_ODL_HIST y borrar de la de recibos RECIBOS_ODL
		
		INSERT INTO EXT.RECIBOS_ODL_HIST
		SELECT  v_idproceso,*
		FROM EXT.RECIBOS_ODL REC
		WHERE REC.ID_POLIZA_ODL = v_ID_POLIZA_ODL
			AND REC.ID_RECIBO_ODL = v_ID_RECIBO_ODL
			AND REC.VERS_RECIBO_ODL = v_VERS_RECIBO_ODL
		;
		
		--COMMIT;
		
		DELETE
		FROM EXT.RECIBOS_ODL REC
		WHERE REC.ID_POLIZA_ODL = v_ID_POLIZA_ODL
			AND REC.ID_RECIBO_ODL = v_ID_RECIBO_ODL
			AND REC.VERS_RECIBO_ODL = v_VERS_RECIBO_ODL
		;
		COMMIT;
		
		--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'Historificado el recibo ' || v_ID_RECIBO_ODL || ' con version ODL ' || v_VERS_RECIBO_ODL || ' para a poliza ' || v_ID_POLIZA_ODL, v_log_count, v_idproceso, 'debug');
		
	END;
  PUBLIC FUNCTION FT_PUNTOS_SEMESTRE(IN_POSITIONNAME VARCHAR(255),IN_PERIODENDDATE DATE) 
  RETURNS v_PUNTOS DECIMAL(25,4)
  AS
	BEGIN
		
		DECLARE io_contador Number := 0;
		DECLARE i_Tenant VARCHAR(127);
		DECLARE puntos_6meses_1 DECIMAL(18, 2) := 0;
		DECLARE puntos_6meses_2 DECIMAL(18, 2) := 0;
		DECLARE dif_6meses INT := 0;
		DECLARE v_eot DATE := EXT.LIB_CONSTANTES_SL:v_eot;

		SELECT ROUND(SUM(VALUE),2), MONTHS_BETWEEN(MIN(PER.STARTDATE),IN_PERIODENDDATE) INTO puntos_6meses_2, dif_6meses
		FROM TCMP.CS_CREDIT CRE
		INNER JOIN TCMP.CS_POSITION POS ON POS.RULEELEMENTOWNERSEQ = CRE.POSITIONSEQ
		INNER JOIN TCMP.CS_PERIOD PER ON PER.PERIODSEQ = CRE.PERIODSEQ
		WHERE POS.NAME = IN_POSITIONNAME
		--AND PER.NAME <> 'October 2023'
		AND PER.STARTDATE >= ADD_MONTHS(IN_PERIODENDDATE, -6)
		AND PER.STARTDATE < IN_PERIODENDDATE
		AND (CRE.GENERICATTRIBUTE3 NOT IN ('04_47', '04_72', '04_86', '04_80', '04_81', '04_82', '04_83', '04_84', '04_85') 
		AND CRE.GENERICATTRIBUTE3 NOT LIKE ('37_%') 
		AND CRE.GENERICATTRIBUTE3 NOT LIKE ('92_%') 
		AND CRE.GENERICATTRIBUTE3 NOT LIKE ('93_%') 
		AND CRE.GENERICATTRIBUTE3 NOT LIKE ('94_%'))
		AND (SUBSTR_BEFORE(CRE.GENERICATTRIBUTE3,'_'),CRE.GENERICATTRIBUTE5) NOT IN (
				SELECT COD_RAMO,NUM_POLIZA FROM EXT.POLIZAS_ODL P 
				WHERE P.FEC_INIC_MOVIM <= (SELECT IFNULL(CC.FEC_REAL_CIE,CC.FEC_PRE_CIE) FROM EXT.CALENDARIO_CIERRE CC WHERE CC.FEC_LIQUI = TO_CHAR(IN_PERIODENDDATE,'YYYYMM'))
					AND (--P.COD_TIPO_EST_POLIZA = 'AN'
						--OR 
						P.FEC_PREV_PROX_ANUL IS NOT NULL
						OR P.FEC_PREV_PROX_RED IS NOT NULL)
		)
		AND PER.REMOVEDATE = v_eot
		AND POS.EFFECTIVESTARTDATE <= IN_PERIODENDDATE AND POS.EFFECTIVEENDDATE > IN_PERIODENDDATE
		AND POS.REMOVEDATE = v_eot;

		SELECT ROUND(SUM(CASE WHEN CONCEPTO = 'NMPRODUC' THEN PUNTOS * (-1) ELSE PUNTOS END), 2) INTO puntos_6meses_1
		FROM EXT.SSMM_DETALLE_PUNTOS 
		WHERE POSITIONNAME = IN_POSITIONNAME 
		AND (PRODUCTO NOT IN ('04_47', '04_72', '04_86', '04_80', '04_81', '04_82', '04_83', '04_84', '04_85') 
		AND PRODUCTO NOT LIKE ('37_%') 
		AND PRODUCTO NOT LIKE ('92_%') 
		AND PRODUCTO NOT LIKE ('93_%') 
		AND PRODUCTO NOT LIKE ('94_%'))
		AND FECHA_COMPENSACION >= ADD_MONTHS(IN_PERIODENDDATE, -6)
		AND FECHA_COMPENSACION < ADD_MONTHS(IN_PERIODENDDATE, dif_6meses)
		AND (NUM_POLIZA,SUBSTR_BEFORE(PRODUCTO,'_')) NOT IN (
			SELECT NUM_POLIZA,COD_RAMO FROM EXT.POLIZAS_ODL P
			WHERE P.FEC_INIC_MOVIM <= (SELECT IFNULL(CC.FEC_REAL_CIE,CC.FEC_PRE_CIE) FROM EXT.CALENDARIO_CIERRE CC WHERE CC.FEC_LIQUI = TO_CHAR(IN_PERIODENDDATE,'YYYYMM'))
				AND (--P.COD_TIPO_EST_POLIZA = 'AN'
					--OR 
					P.FEC_PREV_PROX_ANUL IS NOT NULL
					OR P.FEC_PREV_PROX_RED IS NOT NULL)
		);

		SELECT (COALESCE(puntos_6meses_1, 0) + COALESCE(puntos_6meses_2, 0)) INTO v_PUNTOS FROM DUMMY;

	END;
  PUBLIC FUNCTION FT_PUNTOS_TOTAL(IN_POSITIONNAME VARCHAR(255),IN_PERIODENDDATE DATE) 
  RETURNS v_PUNTOS DECIMAL(25,4)
  AS
	BEGIN

		DECLARE io_contador Number := 0;
		DECLARE i_Tenant VARCHAR(127);
		DECLARE puntos_18meses_1 DECIMAL(18, 2) := 0;
		DECLARE puntos_18meses_2 DECIMAL(18, 2) := 0;
		DECLARE dif_18meses INT := 0;
		DECLARE v_eot DATE := EXT.LIB_CONSTANTES_SL:v_eot;

		SELECT ROUND(SUM(VALUE), 2), MONTHS_BETWEEN(MIN(PER.STARTDATE), IN_PERIODENDDATE) INTO puntos_18meses_2, dif_18meses
		FROM TCMP.CS_CREDIT CRE
		INNER JOIN TCMP.CS_POSITION POS ON POS.RULEELEMENTOWNERSEQ = CRE.POSITIONSEQ
		INNER JOIN TCMP.CS_PERIOD PER ON PER.PERIODSEQ = CRE.PERIODSEQ
		WHERE POS.NAME = IN_POSITIONNAME
		--AND PER.NAME <> 'October 2023'
		AND PER.STARTDATE >= ADD_MONTHS(IN_PERIODENDDATE, -18)
		AND PER.STARTDATE < IN_PERIODENDDATE
		AND (CRE.GENERICATTRIBUTE3 NOT IN ('04_47', '04_72', '04_86', '04_80', '04_81', '04_82', '04_83', '04_84', '04_85') 
		AND CRE.GENERICATTRIBUTE3 NOT LIKE ('37_%') 
		AND CRE.GENERICATTRIBUTE3 NOT LIKE ('92_%') 
		AND CRE.GENERICATTRIBUTE3 NOT LIKE ('93_%') 
		AND CRE.GENERICATTRIBUTE3 NOT LIKE ('94_%'))
		AND (SUBSTR_BEFORE(CRE.GENERICATTRIBUTE3,'_'),CRE.GENERICATTRIBUTE5) NOT IN (
				SELECT COD_RAMO,NUM_POLIZA FROM EXT.POLIZAS_ODL P 
				WHERE P.FEC_INIC_MOVIM <= (SELECT IFNULL(CC.FEC_REAL_CIE,CC.FEC_PRE_CIE) FROM EXT.CALENDARIO_CIERRE CC WHERE CC.FEC_LIQUI = TO_CHAR(IN_PERIODENDDATE,'YYYYMM'))
					AND (--P.COD_TIPO_EST_POLIZA = 'AN'
						--OR 
						P.FEC_PREV_PROX_ANUL IS NOT NULL
						OR P.FEC_PREV_PROX_RED IS NOT NULL)
		)
		AND PER.REMOVEDATE = v_eot
		AND POS.EFFECTIVESTARTDATE <= IN_PERIODENDDATE AND POS.EFFECTIVEENDDATE > IN_PERIODENDDATE
		AND POS.REMOVEDATE = v_eot;

		SELECT ROUND(SUM(CASE WHEN CONCEPTO = 'NMPRODUC' THEN PUNTOS * (-1) ELSE PUNTOS END ), 2) INTO puntos_18meses_1
		FROM EXT.SSMM_DETALLE_PUNTOS 
		WHERE POSITIONNAME = IN_POSITIONNAME 
		AND (PRODUCTO NOT IN ('04_47', '04_72', '04_86', '04_80', '04_81', '04_82', '04_83', '04_84', '04_85') 
		AND PRODUCTO NOT LIKE ('37_%') 
		AND PRODUCTO NOT LIKE ('92_%') 
		AND PRODUCTO NOT LIKE ('93_%') 
		AND PRODUCTO NOT LIKE ('94_%'))
		AND FECHA_COMPENSACION >= ADD_MONTHS(IN_PERIODENDDATE, -18)
		AND FECHA_COMPENSACION < ADD_MONTHS(IN_PERIODENDDATE, dif_18meses)
		AND (NUM_POLIZA,SUBSTR_BEFORE(PRODUCTO,'_')) NOT IN (
			SELECT NUM_POLIZA,COD_RAMO FROM EXT.POLIZAS_ODL P
			WHERE P.FEC_INIC_MOVIM <= (SELECT IFNULL(CC.FEC_REAL_CIE,CC.FEC_PRE_CIE) FROM EXT.CALENDARIO_CIERRE CC WHERE CC.FEC_LIQUI = TO_CHAR(IN_PERIODENDDATE,'YYYYMM'))
				AND (--P.COD_TIPO_EST_POLIZA = 'AN'
					--OR 
					P.FEC_PREV_PROX_ANUL IS NOT NULL
					OR P.FEC_PREV_PROX_RED IS NOT NULL)
		);

		SELECT (COALESCE(puntos_18meses_1, 0) + COALESCE(puntos_18meses_2, 0)) INTO v_PUNTOS FROM DUMMY;

	END;
  PUBLIC FUNCTION getUnitTypeName (i_Tenant VARCHAR2(4), IN i_unitTypeSeq BIGINT )
RETURNS o_unitTypeName  VARCHAR(255) 
  AS
	BEGIN
		DECLARE v_eot DATE := EXT.LIB_CONSTANTES_SL:v_eot;
		
		SELECT UT.NAME INTO o_unitTypeName 
		FROM TCMP.CS_UNITTYPE UT
		WHERE UT.TENANTID = i_Tenant
			AND UT.UNITTYPESEQ = i_unitTypeSeq
			AND UT.REMOVEDATE = v_eot;
	END;
END