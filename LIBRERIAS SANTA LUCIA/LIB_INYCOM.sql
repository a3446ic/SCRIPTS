CREATE LIBRARY "EXT"."LIB_INYCOM" LANGUAGE SQLSCRIPT AS
BEGIN
  PUBLIC FUNCTION VALIDAR_NIF_NIE(IN IN_NIF_NIE VARCHAR(20)) RETURNS OUT_valida BOOLEAN
	AS
	BEGIN
		
		IF IN_NIF_NIE LIKE_REGEXPR '^[KLMXYZ0-9][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$' THEN
			DECLARE letra CHAR(1);
			DECLARE numeros INT;
			
			IF		LEFT(IN_NIF_NIE,1) IN ('K','L','M','X') THEN	numeros = TO_INTEGER('0' || SUBSTRING(IN_NIF_NIE, 2, 7));
				ELSEIF	LEFT(IN_NIF_NIE,1) = 'Y' THEN					numeros = TO_INTEGER('1' || SUBSTRING(IN_NIF_NIE, 2, 7));
				ELSEIF	LEFT(IN_NIF_NIE,1) = 'Z' THEN					numeros = TO_INTEGER('2' || SUBSTRING(IN_NIF_NIE, 2, 7));
			ELSE													numeros = TO_INTEGER(SUBSTRING(IN_NIF_NIE, 1, 8)); END IF;
			letra = SUBSTRING(IN_NIF_NIE, 9, 1);
			
			SELECT CASE
				WHEN MOD(numeros,23) = 0	AND letra = 'T' THEN	TRUE
				WHEN MOD(numeros,23) = 1	AND letra = 'R' THEN	TRUE
				WHEN MOD(numeros,23) = 2	AND letra = 'W' THEN	TRUE
				WHEN MOD(numeros,23) = 3	AND letra = 'A' THEN	TRUE
				WHEN MOD(numeros,23) = 4	AND letra = 'G' THEN	TRUE
				WHEN MOD(numeros,23) = 5	AND letra = 'M' THEN	TRUE
				WHEN MOD(numeros,23) = 6	AND letra = 'Y' THEN	TRUE
				WHEN MOD(numeros,23) = 7	AND letra = 'F' THEN	TRUE
				WHEN MOD(numeros,23) = 8	AND letra = 'P' THEN	TRUE
				WHEN MOD(numeros,23) = 9	AND letra = 'D' THEN	TRUE
				WHEN MOD(numeros,23) = 10	AND letra = 'X' THEN	TRUE
				WHEN MOD(numeros,23) = 11	AND letra = 'B' THEN	TRUE
				WHEN MOD(numeros,23) = 12	AND letra = 'N' THEN	TRUE
				WHEN MOD(numeros,23) = 13	AND letra = 'J' THEN	TRUE
				WHEN MOD(numeros,23) = 14	AND letra = 'Z' THEN	TRUE
				WHEN MOD(numeros,23) = 15	AND letra = 'S' THEN	TRUE
				WHEN MOD(numeros,23) = 16	AND letra = 'Q' THEN	TRUE
				WHEN MOD(numeros,23) = 17	AND letra = 'V' THEN	TRUE
				WHEN MOD(numeros,23) = 18	AND letra = 'H' THEN	TRUE
				WHEN MOD(numeros,23) = 19	AND letra = 'L' THEN	TRUE
				WHEN MOD(numeros,23) = 20	AND letra = 'C' THEN	TRUE
				WHEN MOD(numeros,23) = 21	AND letra = 'K' THEN	TRUE
				WHEN MOD(numeros,23) = 22	AND letra = 'E' THEN	TRUE
					ELSE FALSE
				END AS B INTO OUT_valida from dummy;
				ELSE
				OUT_valida = FALSE;
		END IF;
	END;
  PUBLIC FUNCTION GET_LAST_COMPENSATE_AND_PAY_TIME_BEFORE_LAST_POST_AFTER_FINALIZE(IN in_periodseq BIGINT) RETURNS out_date TIMESTAMP
	AS
	BEGIN
		
		SELECT MAX(PL.STARTTIME) into out_date
        FROM TCMP.CS_PLRUN PL
        WHERE PL.RUNPARAMETERS LIKE '%[Sequence]CompensateAndPay%'
		AND PL.COMMAND = 'PipelineRun'
		AND PL.STATUS = 'Successful'
		AND PL.PERIODSEQ = in_periodseq
		AND PL.STARTTIME < (
			--Usamos la fecha del ultimo Post ejecutado anterior al Finalize del periodo, si se ha realizado sino cogemos la fecha del ultimo Post ejecutado anterior a la fecha actual. 
			SELECT MAX(X.STARTTIME) FROM TCMP.CS_PLRUN X
			WHERE 1=1
			AND X.RUNPARAMETERS LIKE '%[Sequence]Post%'
			AND X.COMMAND = 'PipelineRun'
			AND X.STATUS = 'Successful'
			AND X.PERIODSEQ = in_periodseq
			AND X.STARTTIME < (
				--Usamos la fecha del Finalize del periodo, si aun no se ha realizado (lo normal cuando se lance el REPEXT) se coge la fecha actual.
				--Nos vale por si hay que repetir un REPEXT pasado el Posteo de los balances, ya que estos no se deben de tener en cuenta.
				SELECT IFNULL(MAX(Y.STARTTIME),CURRENT_TIMESTAMP) FROM TCMP.CS_PLRUN Y
				WHERE Y.RUNPARAMETERS LIKE '%[Sequence]Finalize%'
				AND Y.COMMAND = 'PipelineRun'
				AND Y.STATUS = 'Successful'
				AND Y.PERIODSEQ = in_periodseq
			)
		)
		;
	END;
  PUBLIC FUNCTION VALIDAR_CIF(IN IN_CIF VARCHAR(20)) RETURNS OUT_valida BOOLEAN
	AS
	BEGIN
		
		OUT_valida = FALSE;
		
		IF IN_CIF LIKE_REGEXPR '^[ABCDEFGHJNPQRSUVW][0-9]{7}[ABCDEFGHIJ0-9]$' THEN
			DECLARE numeros VARCHAR(7);
			DECLARE final CHAR(1);
			DECLARE control_final CHAR(1);
			DECLARE suma_A INT;
			DECLARE suma_B INT;
			DECLARE suma_C INT;
			DECLARE last_digit SMALLINT;
			
			numeros = SUBSTRING(IN_CIF,2,7);
			final = SUBSTRING(IN_CIF,9,1);
			
			--Pares
			suma_A = TO_INTEGER(SUBSTRING(numeros,6,1)) + TO_INTEGER(SUBSTRING(numeros,4,1)) + TO_INTEGER(SUBSTRING(numeros,2,1));
			--Impares
			suma_B = LEFT(TO_VARCHAR(TO_INTEGER(SUBSTRING(numeros,7,1))*2,'00'),1) + RIGHT(TO_VARCHAR(TO_INTEGER(SUBSTRING(numeros,7,1))*2,'00'),1)
	    	+ LEFT(TO_VARCHAR(TO_INTEGER(SUBSTRING(numeros,5,1))*2,'00'),1) + RIGHT(TO_VARCHAR(TO_INTEGER(SUBSTRING(numeros,5,1))*2,'00'),1)
	    	+ LEFT(TO_VARCHAR(TO_INTEGER(SUBSTRING(numeros,3,1))*2,'00'),1) + RIGHT(TO_VARCHAR(TO_INTEGER(SUBSTRING(numeros,3,1))*2,'00'),1)
	    	+ LEFT(TO_VARCHAR(TO_INTEGER(SUBSTRING(numeros,1,1))*2,'00'),1) + RIGHT(TO_VARCHAR(TO_INTEGER(SUBSTRING(numeros,1,1))*2,'00'),1);
			suma_C = suma_A + suma_B;
			last_digit = MOD(10-MOD(suma_C,10),10);
			
			IF (last_digit = 0) THEN
				control_final = 'J';
				ELSE control_final = CHAR(64 + last_digit);
			END IF;
			
			IF LEFT(IN_CIF,1) IN ('N','P','Q','R','S','W') OR SUBSTRING(IN_CIF,2,2) = '00' AND final LIKE_REGEXPR '[A-Z]' AND final LIKE control_final THEN OUT_valida = TRUE; --Letter
				ELSEIF LEFT(IN_CIF,1) IN ('A','B','E','H') AND final LIKE_REGEXPR '[0-9]' AND final LIKE last_digit THEN OUT_valida = TRUE; --Number
				ELSEIF LEFT(IN_CIF,1) NOT IN ('A','B','E','H','N','P','Q','R','S','W') AND (final LIKE last_digit OR final LIKE control_final) THEN OUT_valida = TRUE; --Both
			END IF;
		END IF;
	END;
  PUBLIC FUNCTION VALIDAR_IBAN(IN IN_IBAN VARCHAR(100)) RETURNS OUT_valida BOOLEAN
	AS
	BEGIN
		
		DECLARE iban_prefix VARCHAR(4);
		DECLARE iban_country_code VARCHAR(2);
		DECLARE iban_check_digits VARCHAR(2);
		DECLARE iban_account_number VARCHAR(30);
		DECLARE iban_numeric VARCHAR(30);
		DECLARE iban_remainder INT;
		DECLARE iban_check_digit INT;
		DECLARE iban VARCHAR(34);
		
		OUT_valida = TRUE;
		-- Eliminar espacios en blanco y guiones del IBAN
		iban = REPLACE(REPLACE(IN_IBAN, ' ', ''), '-', '');
		
		-- Obtener partes del IBAN
		iban_country_code = SUBSTRING(iban, 1, 2);
		iban_check_digits = SUBSTRING(iban, 3, 2);
		iban_account_number = SUBSTRING(iban, 5);
		
		-- Validar la longitud del IBAN y el formato
		IF LENGTH(iban) != 24 OR iban_country_code NOT LIKE_REGEXPR '^[A-Z]{2}$' OR iban_account_number NOT LIKE_REGEXPR '^[0-9]{1,30}$' OR IN_IBAN IS NULL THEN
			OUT_valida = FALSE;
		END IF;
		
		-- Reorganizar el IBAN para calcular los dígitos de control
		iban_numeric = iban_account_number || iban_country_code || '00';
		
		-- Convertir letras a números where A = 10, B = 11, ..., Z = 35
		iban_numeric = 
		REPLACE(
			REPLACE(
				REPLACE(
					REPLACE(
						REPLACE(
							REPLACE(
								REPLACE(
									REPLACE(
										REPLACE(
											REPLACE(
												REPLACE(
													REPLACE(
														REPLACE(
															REPLACE(
																REPLACE(
																	REPLACE(
																		REPLACE(
																			REPLACE(
																				REPLACE(
																					REPLACE(
																						REPLACE(
																							REPLACE(
																								REPLACE(
																									REPLACE(
																										REPLACE(
																											REPLACE(
																												iban_numeric,
																												'A', '10'
																											),
																											'B', '11'
																										),
																										'C', '12'
																									),
																									'D', '13'
																								),
																								'E', '14'
																							),
																							'F', '15'
																						),
																						'G', '16'
																					),
																					'H', '17'
																				),
																				'I', '18'
																			),
																			'J','19'
																		),
																		'K', '20'
																	),
																	'L', '21'
																),
																'M', '22'
															),
															'N', '23'
														),
														'O', '24'
													),
													'P', '25'
												),
												'Q', '26'
											),
											'R', '27'
										),
										'S', '28'
									),
								'T','29'),
								'U', '30'
							),
							'V', '31'
						),
						'W', '32'
					),
					'X', '33'
				),
				'Y', '34'
			),
			'Z', '35'
		);
		
		-- Calcular el dígito de control
		iban_remainder = MOD(SUBSTRING(iban_numeric,1,9), 97);
		iban_remainder = MOD(iban_remainder || SUBSTRING(iban_numeric,10,7),97);
		iban_remainder = MOD(iban_remainder || SUBSTRING(iban_numeric,17,7),97);
		iban_remainder = MOD(iban_remainder || SUBSTRING(iban_numeric,24),97);
		
		iban_check_digit = 98 - iban_remainder;
		
		-- Verificar si el dígito de control es válido
		IF iban_check_digit NOT LIKE iban_check_digits THEN
			OUT_valida = FALSE;
		END IF;
	END;
  PUBLIC PROCEDURE SP_INSERT_INTO_SALESTRANSACTION (IN TABLE_ST TABLE(
			i_Tenant VARCHAR(4)
			, FILENAME VARCHAR(90)
			, ORDERID VARCHAR(40)
			, LINENUMBER BIGINT
			, SUBLINENUMBER BIGINT
			, EVENTTYPEID VARCHAR(40)
			, SALESTRANSACTIONSEQ BIGINT
			, SALESORDERSEQ BIGINT
			, ACCOUNTINGDATE LONGDATE
			, PRODUCTID NVARCHAR(127)
			, PRODUCTNAME NVARCHAR(127)
			, PRODUCTDESCRIPTION NVARCHAR(127)
			, VALUE DECIMAL(25,10)
			, UNITTYPEFORVALUE VARCHAR(255)
			, NUMBEROFUNITS DECIMAL(25,10)
			, UNITVALUE DECIMAL(25,10)
			, UNITTYPEFORUNITVALUE VARCHAR(40)
			, COMPENSATIONDATE LONGDATE
			, PAYMENTTERMS VARCHAR(10)
			, PONUMBER VARCHAR(30)
			, CHANNEL VARCHAR(20)
			, ALTERNATEORDERNUMBER VARCHAR(40)
			, DATASOURCE VARCHAR(20)
			, NATIVECURRENCY VARCHAR(40)
			, NATIVECURRENCYAMOUNT DECIMAL(25,10)
			, DISCOUNTPERCENT DECIMAL(25,10)
			, DISCOUNTTYPE VARCHAR(20)
			, BILLTOCUSTID VARCHAR(50)
			, BILLTOCONTACT VARCHAR(127)
			, BILLTOCOMPANY VARCHAR(90)
			, BILLTOAREACODE VARCHAR(5)
			, BILLTOPHONE VARCHAR(35)
			, BILLTOFAX VARCHAR(35)
			, BILLTOADDRESS1 VARCHAR(255)
			, BILLTOADDRESS2 VARCHAR(255)
			, BILLTOADDRESS3 VARCHAR(255)
			, BILLTOCITY VARCHAR(90)
			, BILLTOSTATE VARCHAR(90)
			, BILLTOCOUNTRY VARCHAR(90)
			, BILLTOPOSTALCODE VARCHAR(40)
			, BILLTOINDUSTRY VARCHAR(100)
			, BILLTOGEOGRAPHY VARCHAR(100)
			, SHIPTOCUSTID VARCHAR(50)
			, SHIPTOCONTACT VARCHAR(127)
			, SHIPTOCOMPANY VARCHAR(90)
			, SHIPTOAREACODE VARCHAR(5)
			, SHIPTOPHONE VARCHAR(35)
			, SHIPTOFAX VARCHAR(35)
			, SHIPTOADDRESS1 VARCHAR(255)
			, SHIPTOADDRESS2 VARCHAR(255)
			, SHIPTOADDRESS3 VARCHAR(255)
			, SHIPTOCITY VARCHAR(90)
			, SHIPTOSTATE VARCHAR(90)
			, SHIPTOCOUNTRY VARCHAR(90)
			, SHIPTOPOSTALCODE VARCHAR(40)
			, SHIPTOINDUSTRY VARCHAR(100)
			, SHIPTOGEOGRAPHY VARCHAR(100)
			, OTHERTOCUSTID VARCHAR(50)
			, OTHERTOCONTACT VARCHAR(127)
			, OTHERTOCOMPANY VARCHAR(90)
			, OTHERTOAREACODE VARCHAR(5)
			, OTHERTOPHONE VARCHAR(35)
			, OTHERTOFAX VARCHAR(35)
			, OTHERTOADDRESS1 VARCHAR(255)
			, OTHERTOADDRESS2 VARCHAR(255)
			, OTHERTOADDRESS3 VARCHAR(255)
			, OTHERTOCITY VARCHAR(90)
			, OTHERTOSTATE VARCHAR(90)
			, OTHERTOCOUNTRY VARCHAR(90)
			, OTHERTOPOSTALCODE VARCHAR(40)
			, OTHERTOINDUSTRY VARCHAR(100)
			, OTHERTOGEOGRAPHY VARCHAR(100)
			, REASONID VARCHAR(40)
			, COMMENTS VARCHAR(255)
			, STAGEPROCESSDATE LONGDATE
			, STAGEPROCESSFLAG SMALLINT
			, BUSINESSUNITNAME VARCHAR(255)
			, BUSINESSUNITMAP BIGINT
			, GENERICATTRIBUTE1 VARCHAR(255)
			, GENERICATTRIBUTE2 VARCHAR(255)
			, GENERICATTRIBUTE3 VARCHAR(255)
			, GENERICATTRIBUTE4 VARCHAR(255)
			, GENERICATTRIBUTE5 VARCHAR(255)
			, GENERICATTRIBUTE6 VARCHAR(255)
			, GENERICATTRIBUTE7 VARCHAR(255)
			, GENERICATTRIBUTE8 VARCHAR(255)
			, GENERICATTRIBUTE9 VARCHAR(255)
			, GENERICATTRIBUTE10 VARCHAR(255)
			, GENERICATTRIBUTE11 VARCHAR(255)
			, GENERICATTRIBUTE12 VARCHAR(255)
			, GENERICATTRIBUTE13 VARCHAR(255)
			, GENERICATTRIBUTE14 VARCHAR(255)
			, GENERICATTRIBUTE15 VARCHAR(255)
			, GENERICATTRIBUTE16 VARCHAR(255)
			, GENERICATTRIBUTE17 VARCHAR(255)
			, GENERICATTRIBUTE18 VARCHAR(255)
			, GENERICATTRIBUTE19 VARCHAR(255)
			, GENERICATTRIBUTE20 VARCHAR(255)
			, GENERICATTRIBUTE21 VARCHAR(255)
			, GENERICATTRIBUTE22 VARCHAR(255)
			, GENERICATTRIBUTE23 VARCHAR(255)
			, GENERICATTRIBUTE24 VARCHAR(255)
			, GENERICATTRIBUTE25 VARCHAR(255)
			, GENERICATTRIBUTE26 VARCHAR(255)
			, GENERICATTRIBUTE27 VARCHAR(255)
			, GENERICATTRIBUTE28 VARCHAR(255)
			, GENERICATTRIBUTE29 VARCHAR(255)
			, GENERICATTRIBUTE30 VARCHAR(255)
			, GENERICATTRIBUTE31 VARCHAR(255)
			, GENERICATTRIBUTE32 VARCHAR(255)
			, GENERICNUMBER1 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER1 VARCHAR(40)
			, GENERICNUMBER2 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER2 VARCHAR(40)
			, GENERICNUMBER3 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER3 VARCHAR(40)
			, GENERICNUMBER4 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER4 VARCHAR(40)
			, GENERICNUMBER5 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER5 VARCHAR(40)
			, GENERICNUMBER6 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER6 VARCHAR(40)
			, GENERICDATE1 LONGDATE
			, GENERICDATE2 LONGDATE
			, GENERICDATE3 LONGDATE
			, GENERICDATE4 LONGDATE
			, GENERICDATE5 LONGDATE
			, GENERICDATE6 LONGDATE
			, GENERICBOOLEAN1 SMALLINT
			, GENERICBOOLEAN2 SMALLINT
			, GENERICBOOLEAN3 SMALLINT
			, GENERICBOOLEAN4 SMALLINT
			, GENERICBOOLEAN5 SMALLINT
			, GENERICBOOLEAN6 SMALLINT
			, STAGEERRORCODE BIGINT
			, COMPENSATIONDATE_OLD LONGDATE
			, PUSEQ_OLD BIGINT
  )
		, IN v_indice BIGINT, INOUT v_log_count INT, IN proc_name VARCHAR(255), INOUT v_estadoPre INT, INOUT v_estadoStage INT, IN i_idproceso BIGINT)
  LANGUAGE SQLScript AS
	BEGIN
		DECLARE num_rows INTEGER := 0;
		DECLARE v_preError INT := EXT.LIB_CONSTANTES_SL:PRESTAGE_STATUS_ERROR;
		DECLARE v_stError INT := EXT.LIB_CONSTANTES_SL:STAGE_STATUS_ERROR;
		
		DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
			BEGIN
				CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG(proc_name , 'SP_INSERT_INTO_SALESTRANSACTION - SQL_ERROR_MESSAGE: ' || IFNULL(::SQL_ERROR_MESSAGE,'') 
																								|| '. SQL_ERROR_CODE: ' || ::SQL_ERROR_CODE, v_log_count, i_idproceso, 'error');
				v_estadoPre := v_preError;
				v_estadoStage := v_stError;
			END;
		/*
		CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'INSERT_INTO_ST_1' || ' - FILENAME: ' || (SELECT FILENAME FROM :TABLE_ST)
				|| ' - ORDERID: ' || CASE WHEN (SELECT ORDERID FROM :TABLE_ST) IS NOT NULL THEN (SELECT ORDERID FROM :TABLE_ST) ELSE 'NULL' END
				|| ' - LINENUMBER: ' || CASE WHEN (SELECT LINENUMBER FROM :TABLE_ST) IS NOT NULL THEN (SELECT LINENUMBER FROM :TABLE_ST) ELSE 'NULL' END
				|| ' - SUBLINENUMBER: ' || CASE WHEN (SELECT SUBLINENUMBER FROM :TABLE_ST) IS NOT NULL THEN (SELECT SUBLINENUMBER FROM :TABLE_ST) ELSE 'NULL' END
				|| ' - EVENTTYPEID: ' || CASE WHEN (SELECT EVENTTYPEID FROM :TABLE_ST) IS NOT NULL THEN (SELECT EVENTTYPEID FROM :TABLE_ST) ELSE 'NULL' END
				|| ' - PRODUCTID: '	|| CASE WHEN (SELECT PRODUCTID FROM :TABLE_ST) IS NOT NULL THEN (SELECT PRODUCTID FROM :TABLE_ST) ELSE 'NULL' END
			, v_log_count);
		
		CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'INSERT_INTO_ST_2' || ' - FILENAME: ' || (SELECT FILENAME FROM :TABLE_ST)
				|| ' - VALUE: ' || CASE WHEN (SELECT VALUE FROM :TABLE_ST) IS NOT NULL THEN (SELECT VALUE FROM :TABLE_ST) ELSE 'NULL' END
				|| ' - UNITTYPEFORVALUE: ' || CASE WHEN (SELECT UNITTYPEFORVALUE FROM :TABLE_ST) IS NOT NULL THEN (SELECT UNITTYPEFORVALUE FROM :TABLE_ST) ELSE 'NULL' END
				|| ' - COMPENSATIONDATE: ' || CASE WHEN (SELECT COMPENSATIONDATE FROM :TABLE_ST) IS NOT NULL THEN (SELECT COMPENSATIONDATE FROM :TABLE_ST) ELSE 'NULL' END
				|| ' - NATIVECURRENCYAMOUNT: ' || CASE WHEN (SELECT NATIVECURRENCYAMOUNT FROM :TABLE_ST) IS NOT NULL THEN (SELECT NATIVECURRENCYAMOUNT FROM :TABLE_ST) ELSE 'NULL' END
				|| ' - DISCOUNTPERCENT: ' || CASE WHEN (SELECT DISCOUNTPERCENT FROM :TABLE_ST) IS NOT NULL THEN (SELECT DISCOUNTPERCENT FROM :TABLE_ST) ELSE 'NULL' END					
			, v_log_count);	
		
		CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'INSERT_INTO_ST_3'	|| ' - FILENAME: ' || (SELECT FILENAME FROM :TABLE_ST)
				|| ' - BUSINESSUNITNAME: ' || CASE WHEN (SELECT BUSINESSUNITNAME FROM :TABLE_ST) IS NOT NULL THEN (SELECT BUSINESSUNITNAME FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - BUSINESSUNITMAP: ' || CASE WHEN (SELECT BUSINESSUNITMAP FROM :TABLE_ST) IS NOT NULL THEN (SELECT BUSINESSUNITMAP FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GA1: ' || CASE WHEN (SELECT GENERICATTRIBUTE1 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICATTRIBUTE1 FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GA2: ' || CASE WHEN (SELECT GENERICATTRIBUTE2 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICATTRIBUTE2 FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GA3: ' || CASE WHEN (SELECT GENERICATTRIBUTE3 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICATTRIBUTE3 FROM :TABLE_ST) ELSE 'NULL' END	
			, v_log_count);
		
		CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'INSERT_INTO_ST_5'	|| ' - FILENAME: ' || (SELECT FILENAME FROM :TABLE_ST)
				|| ' - GA5: ' ||  CASE WHEN (SELECT GENERICATTRIBUTE5 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICATTRIBUTE5 FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GA6: ' ||  CASE WHEN (SELECT GENERICATTRIBUTE6 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICATTRIBUTE6 FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GA10: ' ||  CASE WHEN (SELECT GENERICATTRIBUTE10 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICATTRIBUTE10 FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GA11: '	||  CASE WHEN (SELECT GENERICATTRIBUTE11 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICATTRIBUTE11 FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GD1: '	|| CASE WHEN (SELECT GENERICDATE1 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICDATE1 FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GD2: '	||  CASE WHEN (SELECT GENERICDATE2 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICDATE2 FROM :TABLE_ST) ELSE 'NULL' END	
				|| ' - GD3: '	||  CASE WHEN (SELECT GENERICDATE3 FROM :TABLE_ST) IS NOT NULL THEN (SELECT GENERICDATE3 FROM :TABLE_ST) ELSE 'NULL' END	
			, v_log_count);
		*/	
		INSERT INTO EXT.SALESTRANSACTION_SER
		SELECT  
			FILENAME --'TXSTA_PRD_' || TO_CHAR(CURRENT_DATE,'YYYYMMDD') || '_' || FILENAME --"FILE_NAME_OUT"
			, FILENAME --"FILE_NAME_IN" 
			, i_Tenant --"TENANTID"
			, v_indice --"STAGESALESTRANSACTIONSEQ"
			, FILENAME --"BATCHNAME"	
			, ORDERID  --"ORDERID"
			, LINENUMBER  --"LINENUMBER"   
			, SUBLINENUMBER  --"SUBLINENUMBER"                    
			, EVENTTYPEID   --"EVENTTYPEID"                       
			, SALESTRANSACTIONSEQ --"SALESTRANSACTIONSEQ"
			, SALESORDERSEQ --"SALESORDERSEQ"
			, ACCOUNTINGDATE --"ACCOUNTINGDATE"
			, PRODUCTID --"PRODUCTID"			--viene de la funcion LIB_GLOBAL_SL:FT_GET_PRODUCTO///
			, PRODUCTNAME --"PRODUCTNAME"
			, PRODUCTDESCRIPTION --"PRODUCTDESCRIPTION"
			, VALUE --CUR_SOS.IMP_BASE --"VALUE"                             
			, UNITTYPEFORVALUE --'EUR' --"UNITTYPEFORVALUE"
			, NUMBEROFUNITS --"NUMBEROFUNITS"
			, UNITVALUE --"UNITVALUE"
			, UNITTYPEFORUNITVALUE --"UNITTYPEFORUNITVALUE"
			, COMPENSATIONDATE  		--"COMPENSATIONDATE"   
			, PAYMENTTERMS --"PAYMENTTERMS"
			, PONUMBER --"PONUMBER"
			, CHANNEL --"CHANNEL"
			, ALTERNATEORDERNUMBER --"ALTERNATEORDERNUMBER"
			, DATASOURCE --"DATASOURCE"
			, NATIVECURRENCY --"NATIVECURRENCY"
			, NATIVECURRENCYAMOUNT --"NATIVECURRENCYAMOUNT"           
			, DISCOUNTPERCENT --"DISCOUNTPERCENT"
			, DISCOUNTTYPE --"DISCOUNTTYPE"
			, BILLTOCUSTID --"BILLTOCUSTID"
			, BILLTOCONTACT /*"BILLTOCONTACT"*/
			, BILLTOCOMPANY /*"BILLTOCOMPANY"*/ 
			, BILLTOAREACODE /*"BILLTOAREACODE"*/
			, BILLTOPHONE /*"BILLTOPHONE"*/
			, BILLTOFAX /*"BILLTOFAX"*/
			, BILLTOADDRESS1 /*"BILLTOADDRESS1"*/
			, BILLTOADDRESS2 /*"BILLTOADDRESS2"*/
			, BILLTOADDRESS3 /*"BILLTOADDRESS3"*/
			, BILLTOCITY /*"BILLTOCITY"*/ 
			, BILLTOSTATE /*"BILLTOSTATE"*/
			, BILLTOCOUNTRY /*"BILLTOCOUNTRY"*/
			, BILLTOPOSTALCODE /*"BILLTOPOSTALCODE"*/
			, BILLTOINDUSTRY /*"BILLTOINDUSTRY"*/
			, BILLTOGEOGRAPHY /*"BILLTOGEOGRAPHY"*/
			, SHIPTOCUSTID /*"SHIPTOCUSTID"*/
			, SHIPTOCONTACT /*"SHIPTOCONTACT"*/
			, SHIPTOCOMPANY /*"SHIPTOCOMPANY"*/
			, SHIPTOAREACODE /*"SHIPTOAREACODE"*/
			, SHIPTOPHONE /*"SHIPTOPHONE"*/
			, SHIPTOFAX /*"SHIPTOFAX"*/
			, SHIPTOADDRESS1 /*"SHIPTOADDRESS1"*/
			, SHIPTOADDRESS2 /*"SHIPTOADDRESS2"*/
			, SHIPTOADDRESS3 /*"SHIPTOADDRESS3"*/
			, SHIPTOCITY /*"SHIPTOCITY"*/
			, SHIPTOSTATE /*"SHIPTOSTATE"*/
			, SHIPTOCOUNTRY /*"SHIPTOCOUNTRY"*/
			, SHIPTOPOSTALCODE /*"SHIPTOPOSTALCODE"*/
			, SHIPTOINDUSTRY /*"SHIPTOINDUSTRY"*/
			, SHIPTOGEOGRAPHY /*"SHIPTOGEOGRAPHY"*/
			, OTHERTOCUSTID /*"OTHERTOCUSTID"*/
			, OTHERTOCONTACT /*"OTHERTOCONTACT"*/
			, OTHERTOCOMPANY /*"OTHERTOCOMPANY"*/
			, OTHERTOAREACODE /*"OTHERTOAREACODE"*/
			, OTHERTOPHONE /*"OTHERTOPHONE"*/
			, OTHERTOFAX /*"OTHERTOFAX"*/
			, OTHERTOADDRESS1 /*"OTHERTOADDRESS1"*/
			, OTHERTOADDRESS2 /*"OTHERTOADDRESS2"*/
			, OTHERTOADDRESS3 /*"OTHERTOADDRESS3"*/
			, OTHERTOCITY /*"OTHERTOCITY"*/
			, OTHERTOSTATE /*"OTHERTOSTATE"*/
			, OTHERTOCOUNTRY /*"OTHERTOCOUNTRY"*/
			, OTHERTOPOSTALCODE /*"OTHERTOPOSTALCODE"*/
			, OTHERTOINDUSTRY /*"OTHERTOINDUSTRY"*/
			, OTHERTOGEOGRAPHY /*"OTHERTOGEOGRAPHY"*/
			, REASONID /*"REASONID"*/               --Must pre-exist in Commissions.
			, COMMENTS /*"COMMENTS"*/
			, STAGEPROCESSDATE --"STAGEPROCESSDATE"
			, STAGEPROCESSFLAG --"STAGEPROCESSFLAG"
			, BUSINESSUNITNAME --NULL /*"BUSINESSUNITNAME"*/            					--Must pre-exist in Commissions.
			, BUSINESSUNITMAP  --NULL /*"BUSINESSUNITMAP"*/									
			, GENERICATTRIBUTE1 /*"GENERICATTRIBUTE1"*/            	
			, GENERICATTRIBUTE2   /*"GENERICATTRIBUTE2"*/          	
			, GENERICATTRIBUTE3  /*"GENERICATTRIBUTE3"*/  							
			, GENERICATTRIBUTE4 /*"GENERICATTRIBUTE4"*/              									
			, GENERICATTRIBUTE5  /*"GENERICATTRIBUTE5"*/             
			, GENERICATTRIBUTE6  /*"GENERICATTRIBUTE6"*/
			, GENERICATTRIBUTE7 /*"GENERICATTRIBUTE7"*/
			, GENERICATTRIBUTE8 /*"GENERICATTRIBUTE8"*/
			, GENERICATTRIBUTE9 /*"GENERICATTRIBUTE9"*/
			, GENERICATTRIBUTE10 /*"GENERICATTRIBUTE10"*/      
			, GENERICATTRIBUTE11 /*"GENERICATTRIBUTE11"*/		 
			, GENERICATTRIBUTE12 /*"GENERICATTRIBUTE12"*/
			, GENERICATTRIBUTE13 /*"GENERICATTRIBUTE13"*/
			, GENERICATTRIBUTE14 /*"GENERICATTRIBUTE14"*/
			, GENERICATTRIBUTE15 /*"GENERICATTRIBUTE15"*/
			, GENERICATTRIBUTE16 /*"GENERICATTRIBUTE16"*/
			, GENERICATTRIBUTE17 /*"GENERICATTRIBUTE17"*/
			, GENERICATTRIBUTE18 /*"GENERICATTRIBUTE18"*/
			, GENERICATTRIBUTE19 /*"GENERICATTRIBUTE19"*/
			, GENERICATTRIBUTE20 /*"GENERICATTRIBUTE20"*/
			, GENERICATTRIBUTE21 /*"GENERICATTRIBUTE21"*/
			, GENERICATTRIBUTE22 /*"GENERICATTRIBUTE22"*/
			, GENERICATTRIBUTE23 /*"GENERICATTRIBUTE23"*/
			, GENERICATTRIBUTE24 /*"GENERICATTRIBUTE24"*/
			, GENERICATTRIBUTE25 /*"GENERICATTRIBUTE25"*/
			, GENERICATTRIBUTE26 /*"GENERICATTRIBUTE26"*/
			, GENERICATTRIBUTE27 /*"GENERICATTRIBUTE27"*/
			, GENERICATTRIBUTE28 /*"GENERICATTRIBUTE28"*/
			, GENERICATTRIBUTE29 /*"GENERICATTRIBUTE29"*/
			, GENERICATTRIBUTE30 /*"GENERICATTRIBUTE30"*/
			, GENERICATTRIBUTE31 /*"GENERICATTRIBUTE31"*/
			, GENERICATTRIBUTE32 /*"GENERICATTRIBUTE32"*/
			, GENERICNUMBER1 /*"GENERICNUMBER1"*/                   
			, UNITTYPEFORGENERICNUMBER1 /*"UNITTYPEFORGENERICNUMBER1"*/
			, GENERICNUMBER2 /*"GENERICNUMBER2"*/
			, UNITTYPEFORGENERICNUMBER2 /*"UNITTYPEFORGENERICNUMBER2"*/
			, GENERICNUMBER3 /*"GENERICNUMBER3"*/
			, UNITTYPEFORGENERICNUMBER3 /*"UNITTYPEFORGENERICNUMBER3"*/
			, GENERICNUMBER4 /*"GENERICNUMBER4"*/
			, UNITTYPEFORGENERICNUMBER4 /*"UNITTYPEFORGENERICNUMBER4"*/
			, GENERICNUMBER5 /*"GENERICNUMBER5"*/
			, UNITTYPEFORGENERICNUMBER5 /*"UNITTYPEFORGENERICNUMBER5"*/
			, GENERICNUMBER6 /*"GENERICNUMBER6"*/
			, UNITTYPEFORGENERICNUMBER6 /*"UNITTYPEFORGENERICNUMBER6"*/
			, GENERICDATE1  /*"GENERICDATE1"*/                     
			, GENERICDATE2  /*"GENERICDATE2"*/
			, GENERICDATE3  /*"GENERICDATE3"*/
			, GENERICDATE4 /*"GENERICDATE4"*/
			, GENERICDATE5 /*"GENERICDATE5"*/
			, GENERICDATE6 /*"GENERICDATE6"*/
			, GENERICBOOLEAN1 /*"GENERICBOOLEAN1"*/
			, GENERICBOOLEAN2 /*"GENERICBOOLEAN2"*/
			, GENERICBOOLEAN3 /*"GENERICBOOLEAN3"*/
			, GENERICBOOLEAN4 /*"GENERICBOOLEAN4"*/
			, GENERICBOOLEAN5 /*"GENERICBOOLEAN5"*/
			, GENERICBOOLEAN6 /*"GENERICBOOLEAN6"*/
			, STAGEERRORCODE /*"STAGEERRORCODE"*/
			, COMPENSATIONDATE_OLD /*"COMPENSATIONDATE_OLD"*/
			, PUSEQ_OLD /*"PUSEQ_OLD"*/
		FROM :TABLE_ST;
		
		num_rows := ::rowcount;
		COMMIT;
		
		--Se comenta para no escribir una fila por cada vuelta del cursor.
		--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG(proc_name, 'Fin insercion EXT.SALESTRANSACTION: ' || num_rows || ' filas para el fichero ' || (SELECT FILENAME FROM :TABLE_ST), v_log_count, i_idproceso);
	END;
  PUBLIC PROCEDURE SP_INSERT_INTO_TRANSACTIONASSIGN (IN TABLE_TA TABLE(
			i_Tenant VARCHAR(4)
			, FILENAME VARCHAR(90)
			, ORDERID VARCHAR(40)
			, LINENUMBER BIGINT
			, SUBLINENUMBER BIGINT
			, EVENTTYPEID VARCHAR(40)
			, SALESTRANSACTIONSEQ BIGINT
			, PAYEEID VARCHAR(40)
			, PAYEETYPE VARCHAR(40)
			, POSITIONNAME VARCHAR(127)
			, TITLENAME VARCHAR(127)
			, GENERICATTRIBUTE1 VARCHAR(255)
			, GENERICATTRIBUTE2 VARCHAR(255)
			, GENERICATTRIBUTE3 VARCHAR(255)
			, GENERICATTRIBUTE4 VARCHAR(255)
			, GENERICATTRIBUTE5 VARCHAR(255)
			, GENERICATTRIBUTE6 VARCHAR(255)
			, GENERICATTRIBUTE7 VARCHAR(255)
			, GENERICATTRIBUTE8 VARCHAR(255)
			, GENERICATTRIBUTE9 VARCHAR(255)
			, GENERICATTRIBUTE10 VARCHAR(255)
			, GENERICATTRIBUTE11 VARCHAR(255)
			, GENERICATTRIBUTE12 VARCHAR(255)
			, GENERICATTRIBUTE13 VARCHAR(255)
			, GENERICATTRIBUTE14 VARCHAR(255)
			, GENERICATTRIBUTE15 VARCHAR(255)
			, GENERICATTRIBUTE16 VARCHAR(255)
			, GENERICNUMBER1 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER1 VARCHAR(40)
			, GENERICNUMBER2 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER2 VARCHAR(40)
			, GENERICNUMBER3 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER3 VARCHAR(40)
			, GENERICNUMBER4 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER4 VARCHAR(40)
			, GENERICNUMBER5 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER5 VARCHAR(40)
			, GENERICNUMBER6 DECIMAL(25,10)
			, UNITTYPEFORGENERICNUMBER6 VARCHAR(40)
			, GENERICDATE1 LONGDATE
			, GENERICDATE2 LONGDATE
			, GENERICDATE3 LONGDATE
			, GENERICDATE4 LONGDATE
			, GENERICDATE5 LONGDATE
			, GENERICDATE6 LONGDATE
			, GENERICBOOLEAN1 SMALLINT
			, GENERICBOOLEAN2 SMALLINT
			, GENERICBOOLEAN3 SMALLINT
			, GENERICBOOLEAN4 SMALLINT
			, GENERICBOOLEAN5 SMALLINT
			, GENERICBOOLEAN6 SMALLINT
		)
		, IN v_indice BIGINT, INOUT v_log_count INT, IN proc_name VARCHAR(255), INOUT v_estadoPre INT, INOUT v_estadoStage INT, IN i_idproceso BIGINT )
  LANGUAGE SQLScript AS
	BEGIN
		DECLARE num_rows INTEGER := 0;
		DECLARE v_existe_trx INTEGER := 0;
		DECLARE v_setnumber INTEGER := 1;
		DECLARE v_preError INT := EXT.LIB_CONSTANTES_SL:PRESTAGE_STATUS_ERROR;
		DECLARE v_stError INT := EXT.LIB_CONSTANTES_SL:STAGE_STATUS_ERROR;

		DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
			BEGIN
				CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG(proc_name , 'SP_INSERT_INTO_TRANSACTIONASSIGN - SQL_ERROR_MESSAGE: ' || IFNULL(::SQL_ERROR_MESSAGE,'') 
																								|| '. SQL_ERROR_CODE: ' || ::SQL_ERROR_CODE, v_log_count, i_idproceso ,'error');
				v_estadoPre := v_preError;
				v_estadoStage := v_stError;
			END;
		
		SELECT COUNT(*) INTO v_existe_trx
		FROM EXT.TRANSACTIONASSIGN TA
		WHERE TA.ORDERID = (SELECT ORDERID FROM :TABLE_TA)
			AND TA.LINENUMBER = (SELECT LINENUMBER FROM :TABLE_TA)
			AND TA.SUBLINENUMBER = (SELECT SUBLINENUMBER FROM :TABLE_TA)
			AND TA.EVENTTYPEID = (SELECT EVENTTYPEID FROM :TABLE_TA);
		
		IF v_existe_trx > 0 THEN
			SELECT MAX(SETNUMBER) INTO v_setnumber
			FROM EXT.TRANSACTIONASSIGN TA
			WHERE TA.ORDERID = (SELECT ORDERID FROM :TABLE_TA)
				AND TA.LINENUMBER = (SELECT LINENUMBER FROM :TABLE_TA)
				AND TA.SUBLINENUMBER = (SELECT SUBLINENUMBER FROM :TABLE_TA)
				AND TA.EVENTTYPEID = (SELECT EVENTTYPEID FROM :TABLE_TA);
			
			v_setnumber := v_setnumber + 1;
		END IF;
		/*
		--SELECT CAMPO2 FROM :outTab;
		CALL CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG (proc_name, 'INSERT_INTO_TA' || ' - FILENAME: ' || (SELECT FILENAME FROM :TABLE_TA)			
				|| ' - ORDERID: ' || CASE WHEN (SELECT ORDERID FROM :TABLE_TA) IS NOT NULL THEN (SELECT ORDERID FROM :TABLE_TA) ELSE 'NULL' END	
				|| ' - LINENUMBER: ' || CASE WHEN (SELECT LINENUMBER FROM :TABLE_TA) IS NOT NULL THEN (SELECT LINENUMBER FROM :TABLE_TA) ELSE 'NULL' END		
				|| ' - SUBLINENUMBER: ' || CASE WHEN (SELECT SUBLINENUMBER FROM :TABLE_TA) IS NOT NULL THEN (SELECT SUBLINENUMBER FROM :TABLE_TA) ELSE 'NULL' END	
				|| ' - EVENTTYPEID: ' || CASE WHEN (SELECT EVENTTYPEID FROM :TABLE_TA) IS NOT NULL THEN (SELECT EVENTTYPEID FROM :TABLE_TA) ELSE 'NULL' END		
				|| ' - POSITIONNAME: ' || CASE WHEN (SELECT POSITIONNAME FROM :TABLE_TA) IS NOT NULL THEN (SELECT POSITIONNAME FROM :TABLE_TA) ELSE 'NULL' END	
				|| ' - GA1: ' || CASE WHEN (SELECT GENERICATTRIBUTE1 FROM :TABLE_TA) IS NOT NULL THEN (SELECT GENERICATTRIBUTE1 FROM :TABLE_TA) ELSE 'NULL' END	
				|| ' - GA2: ' || CASE WHEN (SELECT GENERICATTRIBUTE2 FROM :TABLE_TA) IS NOT NULL THEN (SELECT GENERICATTRIBUTE2 FROM :TABLE_TA)ELSE 'NULL' END	
			, v_log_count);
		*/
		INSERT INTO EXT.TRANSACTIONASSIGN_SER
		SELECT  
			FILENAME --'TXTA_PRD_' || TO_CHAR(CURRENT_DATE,'YYYYMMDD') || '_' || FILENAME --"FILE_NAME_OUT"
			, FILENAME -- /*"FILE_NAME_IN"*/ 
			, i_Tenant --"TENANTID"
			, v_indice --"STAGESALESTRANSACTIONSEQ"
			, v_setnumber --"SETNUMBER"
			, FILENAME --"BATCHNAME"	
			, ORDERID  /*"ORDERID"*/ 
			, LINENUMBER  /*"LINENUMBER"*/  
			, SUBLINENUMBER  /*"SUBLINENUMBER"*/                      
			, EVENTTYPEID  /*"EVENTTYPEID"*/                       
			, SALESTRANSACTIONSEQ --"SALESTRANSACTIONSEQ"
			, PAYEEID /*"PAYEEID"*/
			, PAYEETYPE /*"PAYEETYPE"*/                              --required if PayeeID is provided
			, POSITIONNAME --V_POSITIONNAME  /*"POSITIONNAME"*/                           		
			, TITLENAME /*"TITLENAME"*/ 
			, GENERICATTRIBUTE1  /*"GENERICATTRIBUTE1"*/              
			, GENERICATTRIBUTE2  /*"GENERICATTRIBUTE2"*/               
			, GENERICATTRIBUTE3 /*"GENERICATTRIBUTE3"*/                      
			, GENERICATTRIBUTE4 /*"GENERICATTRIBUTE4"*/ 
			, GENERICATTRIBUTE5 /*"GENERICATTRIBUTE5"*/ 
			, GENERICATTRIBUTE6 /*"GENERICATTRIBUTE6"*/ 
			, GENERICATTRIBUTE7 /*"GENERICATTRIBUTE7"*/ 
			, GENERICATTRIBUTE8 /*"GENERICATTRIBUTE8"*/ 
			, GENERICATTRIBUTE9 /*"GENERICATTRIBUTE9"*/ 
			, GENERICATTRIBUTE10 /*"GENERICATTRIBUTE10"*/ 
			, GENERICATTRIBUTE11 /*"GENERICATTRIBUTE11"*/ 
			, GENERICATTRIBUTE12 /*"GENERICATTRIBUTE12"*/ 
			, GENERICATTRIBUTE13 /*"GENERICATTRIBUTE13"*/ 
			, GENERICATTRIBUTE14 /*"GENERICATTRIBUTE14"*/ 
			, GENERICATTRIBUTE15 /*"GENERICATTRIBUTE15"*/ 
			, GENERICATTRIBUTE16 /*"GENERICATTRIBUTE16"*/ 
			, GENERICNUMBER1 /*"GENERICNUMBER1"*/                  
			, UNITTYPEFORGENERICNUMBER1 /*"UNITTYPEFORGENERICNUMBER1"*/ 
			, GENERICNUMBER2 /*"GENERICNUMBER2"*/ 
			, UNITTYPEFORGENERICNUMBER2 /*"UNITTYPEFORGENERICNUMBER2"*/ 
			, GENERICNUMBER3 /*"GENERICNUMBER3"*/ 
			, UNITTYPEFORGENERICNUMBER3 /*"UNITTYPEFORGENERICNUMBER3"*/ 
			, GENERICNUMBER4 /*"GENERICNUMBER4"*/ 
			, UNITTYPEFORGENERICNUMBER4 /*"UNITTYPEFORGENERICNUMBER4"*/ 
			, GENERICNUMBER5 /*"GENERICNUMBER5"*/ 
			, UNITTYPEFORGENERICNUMBER5 /*"UNITTYPEFORGENERICNUMBER5"*/ 
			, GENERICNUMBER6 /*"GENERICNUMBER6"*/
			, UNITTYPEFORGENERICNUMBER6 /*"UNITTYPEFORGENERICNUMBER6"*/
			, GENERICDATE1 /*"GENERICDATE1"*/ 
			, GENERICDATE2 /*"GENERICDATE2"*/ 
			, GENERICDATE3 /*"GENERICDATE3"*/ 
			, GENERICDATE4 /*"GENERICDATE4"*/ 
			, GENERICDATE5 /*"GENERICDATE5"*/ 
			, GENERICDATE6 /*"GENERICDATE6"*/ 
			, GENERICBOOLEAN1 /*"GENERICBOOLEAN1"*/ 
			, GENERICBOOLEAN2 /*"GENERICBOOLEAN2"*/ 
			, GENERICBOOLEAN3 /*"GENERICBOOLEAN3"*/ 
			, GENERICBOOLEAN4 /*"GENERICBOOLEAN4"*/ 
			, GENERICBOOLEAN5 /*"GENERICBOOLEAN5"*/ 
			, GENERICBOOLEAN6 /*"GENERICBOOLEAN6"*/
        FROM :TABLE_TA;
		
		num_rows := ::rowcount;
		COMMIT;
		
		--Se comenta para no escribir una fila por cada vuelta del cursor.
		--CALL EXT.LIB_CONSTANTES_SL:WRITE_LOG(proc_name, 'Fin insercion EXT.TRANSACTIONASSIGN: '|| num_rows || ' filas para el fichero '|| (SELECT FILENAME FROM :TABLE_TA), v_log_count, i_idproceso);

	END;
END